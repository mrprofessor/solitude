{"version":3,"sources":["shared/customEditor/CustomEditor.js","shared/customEditor/CustomEditorContainer.js","components/codeBlock/CodeBlock.js","components/resultPane/ResultPane.js","App.js","serviceWorker.js","index.js"],"names":["CustomEditor","value","onValueChange","options","mode","lineNumbers","spellcheck","onBeforeChange","editor","data","CustomEditorContainer","onMarkdownValueChange","useState","editorValue","setEditorValue","useEffect","CodeBlock","this","props","language","style","base16AteliersulphurpoolLight","PureComponent","defaultProps","ResultPane","markdownValue","className","source","escapeHtml","renderers","code","App","setMarkdownValue","console","log","split","defaultSize","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sNAyBeA,G,wBAhBM,SAAC,GAA8B,IAA5BC,EAA2B,EAA3BA,MAAOC,EAAoB,EAApBA,cAC7B,OACE,kBAAC,aAAD,CACEC,QAAS,CACPC,KAAM,MACNC,aAAa,EACbC,YAAY,GAEdL,MAAOA,EACPM,eAAgB,SAACC,EAAQC,EAAMR,GAC7BC,EAAcD,QCDPS,EAfe,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,sBAA4B,EACrBC,mBAAS,IADY,mBACpDC,EADoD,KACvCC,EADuC,KAQ3D,OAJAC,qBAAU,WACRJ,EAAsBE,KACrB,CAACA,IAGF,6BACE,kBAAC,EAAD,CAAcZ,MAAOY,EAAaX,cAAeY,M,2ECCjDE,E,iLAUM,IAAD,EACqBC,KAAKC,MAAzBC,EADD,EACCA,SAAUlB,EADX,EACWA,MAClB,OACE,kBAAC,IAAD,CACEkB,SAAUA,EACVC,MAAOC,KAENpB,O,GAjBeqB,iBAAlBN,EAMGO,aAAe,CACpBJ,SAAU,MAgBCH,QCrBAQ,EAZI,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cACpB,OACE,yBAAKC,UAAU,eACb,kBAAC,IAAD,CACEC,OAAQF,EACRG,YAAY,EACZC,UAAW,CAAEC,KAAMd,O,cCqBZe,MAxBf,WAAe,MAE6BnB,mBAAS,IAFtC,mBAENa,EAFM,KAESO,EAFT,KAUb,OAFAC,QAAQC,IAAIT,GAGV,kBAAC,IAAD,CAAWU,MAAM,WAAWC,YAAY,OACtC,6BACE,kBAAC,EAAD,CACEzB,sBAV0B,SAAAV,GAChC+B,EAAiB/B,OAYf,6BACE,kBAAC,EAAD,CAAYwB,cAAeA,OCbfY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD8H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.42e9828d.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { Controlled as CodeMirror } from \"react-codemirror2\";\n\nimport \"codemirror/lib/codemirror.css\";\nimport \"codemirror/theme/neat.css\";\nimport \"codemirror/mode/gfm/gfm\";\n\nimport \"../../styles/CodeMirror.css\";\n\nconst CustomEditor = ({ value, onValueChange }) => {\n  return (\n    <CodeMirror\n      options={{\n        mode: \"gfm\",\n        lineNumbers: true,\n        spellcheck: true\n      }}\n      value={value}\n      onBeforeChange={(editor, data, value) => {\n        onValueChange(value);\n      }}\n    />\n  );\n};\n\nexport default CustomEditor;\n","import React, { useState, useEffect } from \"react\";\nimport CustomEditor from \"./CustomEditor.js\";\n\nconst CustomEditorContainer = ({ onMarkdownValueChange }) => {\n  const [editorValue, setEditorValue] = useState(\"\");\n\n  // Update the global markdown value whenever the markdown changes.\n  useEffect(() => {\n    onMarkdownValueChange(editorValue);\n  }, [editorValue]);\n\n  return (\n    <div>\n      <CustomEditor value={editorValue} onValueChange={setEditorValue} />\n    </div>\n  );\n};\n\nexport default CustomEditorContainer;\n","import React, { PureComponent } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Prism as SyntaxHighlighter } from \"react-syntax-highlighter\";\nimport {\n  ghcolors,\n  hopscotch,\n  pojoaque,\n  vs,\n  xonokai,\n  base16AteliersulphurpoolLight,\n  cb,\n  prism\n} from \"react-syntax-highlighter/dist/esm/styles/prism\";\n\nclass CodeBlock extends PureComponent {\n  static propTypes = {\n    value: PropTypes.string.isRequired,\n    language: PropTypes.string\n  };\n\n  static defaultProps = {\n    language: null\n  };\n\n  render() {\n    const { language, value } = this.props;\n    return (\n      <SyntaxHighlighter\n        language={language}\n        style={base16AteliersulphurpoolLight}\n      >\n        {value}\n      </SyntaxHighlighter>\n    );\n  }\n}\n\nexport default CodeBlock;\n","import React from \"react\";\nimport ReactMarkdown from \"react-markdown\";\nimport CodeBlock from \"../codeBlock/CodeBlock\";\n\nconst ResultPane = ({ markdownValue }) => {\n  return (\n    <div className=\"result-pane\">\n      <ReactMarkdown\n        source={markdownValue}\n        escapeHtml={false}\n        renderers={{ code: CodeBlock }}\n      />\n    </div>\n  );\n};\n\nexport default ResultPane;\n","import React, { useState } from \"react\";\nimport SplitPane from \"react-split-pane\";\nimport CustomEditorContainer from \"./shared/customEditor/CustomEditorContainer.js\";\nimport ResultPane from \"./components/resultPane/ResultPane.js\";\nimport \"./styles/Resizer.css\";\nimport \"./styles/ResultPane.css\";\n\nfunction App() {\n  // Remove global states in APP and use redux\n  const [markdownValue, setMarkdownValue] = useState(\"\");\n\n  const handleMarkdownValueChange = value => {\n    setMarkdownValue(value);\n  };\n\n  console.log(markdownValue);\n\n  return (\n    <SplitPane split=\"vertical\" defaultSize=\"50%\">\n      <div>\n        <CustomEditorContainer\n          onMarkdownValueChange={handleMarkdownValueChange}\n        />\n      </div>\n      <div>\n        <ResultPane markdownValue={markdownValue} />\n      </div>\n    </SplitPane>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}