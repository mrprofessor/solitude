{"version":3,"sources":["actions/index.js","components/appbar/Appbar.js","components/appbar/AppbarContainer.js","components/customEditor/CustomEditor.js","components/customEditor/CustomEditorContainer.js","components/codeBlock/CodeBlock.js","components/resultPane/ResultPane.js","components/splitView/SplitView.js","components/splitView/SplitViewContainer.js","components/gitHubUser/GitHubUser.js","utils/utils.js","shared/customModal/CustomModal.js","components/toolbar/Toolbar.js","components/toolbar/ToolbarContainer.js","shared/customButton/CustomButton.js","shared/customTag/CustomTag.js","components/noteList/NoteList.js","components/noteList/NoteListContainer.js","components/findSolitdueRepository/FindSolitudeRepository.js","components/createRepository/CreateRepository.js","components/modal/RootModalContainer.js","components/modal/GitModalContainer.js","auth/AuthClient.js","App.js","serviceWorker.js","reducers/editor.js","reducers/splitPane.js","reducers/markdown.js","reducers/auth.js","reducers/modal.js","reducers/repository.js","reducers/notes.js","reducers/index.js","index.js"],"names":["updateMarkdownValue","text","type","updatePaneSize","size","Appbar","onViewModeChange","className","width","height","onClick","connect","dispatch","value","CustomEditor","onValueChange","onSelectedEditorChange","markdownValue","options","mode","lineNumbers","spellcheck","theme","onBeforeChange","editor","data","onSelection","state","editorState","CodeBlock","this","props","language","style","base16AteliersulphurpoolLight","PureComponent","defaultProps","source","escapeHtml","renderers","code","SplitView","paneSize","onPaneSizeChange","split","defaultSize","onDragFinished","CustomEditorContainer","splitPane","LIST_REPO_QUERY","gql","ListRepository","useQuery","loading","error","useDispatch","viewer","login","id","updateUser","src","avatarUrl","readTextFile","file","Promise","resolve","reject","reader","FileReader","onload","e","target","result","onerror","readAsText","handleRichTextButtonClick","isEmpty","selectedText","getSelection","cursor","getCursor","setCursor","line","A1","A2","ch","B1","findWordAt","anchor","B2","head","setSelection","test","replaceSelection","focus","match","input","repeat","Number","buildRestUrl","method","owner","repoName","path","CustomModal","modalTitle","isModalOpen","modalBody","onModalClose","title","visible","onOk","onCancel","Toolbar","token","handleNewFileUpload","handleModalOpen","modalType","href","config","GITHUB_APP_CLIENT_ID","event","a","async","fileSelector","document","createElement","onchange","files","fileContent","console","preventDefault","click","handleUploadClick","fileName","element","getValue","Blob","URL","createObjectURL","download","body","appendChild","GitHubUser","auth","modalState","modalProps","CustomButton","label","CustomTag","Search","Input","NoteList","notes","loadNote","deleteNote","createNote","saveNote","useState","noteName","setNoteName","bordered","dataSource","renderItem","item","Item","key","oid","actions","color","display","justifyContent","name","enterButton","onChange","onSearch","NoteListContainer","refetchList","useSelector","repository","URI","nameWithOwner","deleteBody","message","sha","headers","Authorization","fetch","JSON","stringify","then","response","catch","log","createBody","content","btoa","FIND_SOLITUDE_NOTE_REPO","FindSolitudeRepository","updateRepository","updateNotesList","userName","variables","expression","fetchPolicy","refetch","useEffect","onCompleted","noteList","forEach","note","indexNote","object","entries","find","entry","buildNoteList","onError","CREATE_SOLITUDE_NOTES_REPOSITORY","CreateRepository","repositoryId","ownerId","ownerName","useMutation","createRepo","TEMPLATE_REPOSITORY_ID","templateRepositoryId","cloneTemplateRepository","MODAL_COMPONENTS","GIT_MODAL","hideModal","repo","registerSolitudeRepo","notesList","list","updateNoteList","isOpen","clientId","gitHubLink","window","location","onGitConnectClick","modal","SpecificModal","authClient","ApolloClient","uri","request","operation","setContext","authorization","onTokenChange","updateToken","authToken","setToken","json","access_token","Error","client","AppbarContainer","ToolbarContainer","SplitViewContainer","Boolean","hostname","action","initialState","combineReducers","store","createStore","rootReducer","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8892395a.chunk.js","sourcesContent":["export const updateMarkdownValue = text => ({\n  type: \"UPDATE_MARKDOWN_VALUE\",\n  text\n});\n\nexport const updateEditorState = editorState => ({\n  type: \"UPDATE_EDITOR_STATE\",\n  editorState\n});\n\nexport const updatePaneSize = size => ({\n  type: \"UPDATE_PANE_SIZE\",\n  size\n});\n\nexport const updateToken = token => ({\n  type: \"UPDATE_TOKEN\",\n  token\n});\n\nexport const updateUser = ({ login, id }) => ({\n  type: \"UPDATE_GIT_USER\",\n  id,\n  login\n});\n\nexport const showModal = ({ modalType, modalProps }) => ({\n  type: \"SHOW_MODAL\",\n  modalType,\n  modalProps\n});\n\nexport const hideModal = () => ({\n  type: \"HIDE_MODAL\"\n});\n\nexport const registerSolitudeRepo = repo => ({\n  type: \"REGISTER_SOLITUDE_REPO\",\n  repo\n});\n\nexport const updateNoteList = list => ({\n  type: \"UPDATE_NOTE_LIST\",\n  list\n});\n","import React from \"react\";\nimport { MdFormatAlignLeft } from \"react-icons/md\";\nimport { MdChromeReaderMode } from \"react-icons/md\";\nimport { TiEye } from \"react-icons/ti/\";\nimport \"../../styles/Appbar.css\";\n\nconst Appbar = ({ onViewModeChange }) => {\n  return (\n    <div className=\"appbar\">\n      <div className=\"logo\">\n        <span>Solitude</span>\n      </div>\n\n      <div className=\"modebar\">\n        <MdFormatAlignLeft\n          width=\"22\"\n          height=\"22\"\n          onClick={() => onViewModeChange(\"100%\")}\n        />\n        <MdChromeReaderMode\n          width=\"22\"\n          height=\"22\"\n          onClick={() => onViewModeChange(\"50%\")}\n        />\n        <TiEye width=\"22\" height=\"22\" onClick={() => onViewModeChange(\"0%\")} />\n      </div>\n    </div>\n  );\n};\n\nexport default Appbar;\n","import { connect } from \"react-redux\";\nimport { updatePaneSize } from \"../../actions\";\nimport Appbar from \"./Appbar.js\";\n\nconst mapDispatchToProps = dispatch => ({\n  onViewModeChange: value => dispatch(updatePaneSize(value))\n});\n\nexport default connect(null, mapDispatchToProps)(Appbar);\n","import React, { useState } from \"react\";\nimport { Controlled as CodeMirror } from \"react-codemirror2\";\n\nimport \"codemirror/lib/codemirror.css\";\nimport \"codemirror/theme/neo.css\";\n// Import supported languages here\nimport \"codemirror/mode/javascript/javascript\";\nimport \"codemirror/mode/jsx/jsx\";\nimport \"codemirror/mode/python/python\";\nimport \"codemirror/mode/clike/clike\";\nimport \"codemirror/mode/css/css\";\nimport \"codemirror/mode/go/go\";\nimport \"codemirror/mode/rust/rust\";\nimport \"codemirror/mode/markdown/markdown\";\nimport \"codemirror/mode/gfm/gfm\";\nimport \"codemirror/mode/shell/shell\";\n\nimport \"../../styles/CodeMirror.css\";\n\nconst CustomEditor = ({\n  onValueChange,\n  onSelectedEditorChange,\n  markdownValue\n}) => {\n  return (\n    <CodeMirror\n      options={{\n        mode: \"gfm\",\n        lineNumbers: true,\n        spellcheck: true,\n        theme: \"neo\"\n        //autofocus: true,\n      }}\n      value={markdownValue}\n      onBeforeChange={(editor, data, value) => {\n        onValueChange(value);\n      }}\n      onSelection={(editor, data) => {\n        onSelectedEditorChange(editor);\n      }}\n      height=\"100%\"\n    />\n  );\n};\n\nexport default CustomEditor;\n\n// TODO\n// Editor is set to autofocus, and onFocus the editorState will be\n// updated.\n// Remove onFocus and add initialize the editorState with a codemirror\n// instance\n//onFocus={(editor, data) => {\n//onSelectedEditorChange(editor);\n//}}\n","import { connect } from \"react-redux\";\nimport { updateMarkdownValue, updateEditorState } from \"../../actions\";\nimport CustomEditor from \"./CustomEditor.js\";\n\nconst mapStateToProps = state => ({\n  markdownValue: state.markdownValue\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onValueChange: value => dispatch(updateMarkdownValue(value)),\n  onSelectedEditorChange: editor => dispatch(updateEditorState(editor))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CustomEditor);\n","import React, { PureComponent } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Prism as SyntaxHighlighter } from \"react-syntax-highlighter\";\nimport {\n  ghcolors,\n  hopscotch,\n  pojoaque,\n  vs,\n  xonokai,\n  base16AteliersulphurpoolLight,\n  cb,\n  prism\n} from \"react-syntax-highlighter/dist/esm/styles/prism\";\n\nclass CodeBlock extends PureComponent {\n  static propTypes = {\n    value: PropTypes.string.isRequired,\n    language: PropTypes.string\n  };\n\n  static defaultProps = {\n    language: null\n  };\n\n  render() {\n    const { language, value } = this.props;\n    return (\n      <SyntaxHighlighter\n        language={language}\n        style={base16AteliersulphurpoolLight}\n      >\n        {value}\n      </SyntaxHighlighter>\n    );\n  }\n}\n\nexport default CodeBlock;\n","import React from \"react\";\nimport ReactMarkdown from \"react-markdown\";\nimport CodeBlock from \"../codeBlock/CodeBlock\";\n\nimport { connect } from \"react-redux\";\n\nconst ResultPane = ({ markdownValue }) => {\n  return (\n    <ReactMarkdown\n      className={\"react-markdown\"}\n      source={markdownValue}\n      //source={\"\"}\n      escapeHtml={false}\n      renderers={{ code: CodeBlock }}\n    />\n  );\n};\n\nconst mapStateToProps = state => ({\n  markdownValue: state.markdownValue\n});\n\nexport default connect(mapStateToProps)(ResultPane);\n","import React from \"react\";\nimport SplitPane from \"react-split-pane\";\nimport CustomEditorContainer from \"../customEditor/CustomEditorContainer.js\";\nimport ResultPane from \"../resultPane/ResultPane.js\";\n\nconst SplitView = ({ paneSize, onPaneSizeChange }) => {\n  return (\n    <SplitPane\n      split=\"vertical\"\n      defaultSize={paneSize}\n      size={paneSize}\n      //defaultSize={parseInt(localStorage.getItem(\"splitPos\"), 10)}\n      //onChange={size => localStorage.setItem(\"splitPos\", size)}\n      onDragFinished={size => onPaneSizeChange(size)}\n    >\n      <div className=\"editor-pane\">\n        {paneSize !== \"0%\" && <CustomEditorContainer />}\n      </div>\n      <div className=\"result-pane\">\n        <ResultPane />\n      </div>\n    </SplitPane>\n  );\n};\n\nexport default SplitView;\n","import { connect } from \"react-redux\";\nimport { updatePaneSize } from \"../../actions\";\nimport SplitView from \"./SplitView.js\";\n\nconst mapStateToProps = state => ({\n  paneSize: state.splitPane.size\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onPaneSizeChange: value => dispatch(updatePaneSize(value))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SplitView);\n","import React from \"react\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport { useDispatch } from \"react-redux\";\nimport { gql } from \"apollo-boost\";\nimport { Avatar } from \"antd\";\nimport { updateUser } from \"../../actions\";\n\nconst LIST_REPO_QUERY = gql`\n  {\n    viewer {\n      id\n      login\n      avatarUrl\n    }\n  }\n`;\n\nconst ListRepository = () => {\n  const { loading, error, data } = useQuery(LIST_REPO_QUERY);\n  const dispatch = useDispatch();\n\n  // Update git user name in redux store\n  if (data && data.viewer.login) {\n    dispatch(updateUser(data.viewer));\n  }\n\n  return <Avatar src={data && data.viewer.avatarUrl} size=\"small\" />;\n};\n\nexport default ListRepository;\n","import { isEmpty } from \"lodash\";\n\nexport const readTextFile = file => {\n  return new Promise((resolve, reject) => {\n    let reader = new FileReader();\n    // Listener\n    reader.onload = e => {\n      resolve(e.target.result);\n    };\n    reader.onerror = e => reject(e);\n\n    reader.readAsText(file);\n  });\n};\n\nexport const handleRichTextButtonClick = ({ type = \"\", editorState }) => {\n  // As we don't have the editor state initialized, return null\n  if (isEmpty(editorState)) return null;\n  let selectedText = editorState.getSelection();\n  let cursor = editorState.getCursor();\n\n  switch (type) {\n    case \"header\":\n      editorState.setCursor(cursor.line, 0);\n      // FIXME\n      // Use better variables\n      const A1 = editorState.getCursor().line;\n      const A2 = editorState.getCursor().ch;\n      const B1 = editorState.findWordAt({ line: A1, ch: A2 }).anchor.ch;\n      const B2 = editorState.findWordAt({ line: A1, ch: A2 }).head.ch;\n\n      editorState.setSelection({ line: A1, ch: B1 }, { line: A1, ch: B2 });\n      selectedText = editorState.getSelection();\n\n      // If header in range of h1-h5\n      if (/^#{1,5}$/.test(selectedText)) {\n        editorState.replaceSelection(selectedText + \"#\");\n      }\n      // If header is h6\n      else if (/^#{6,}$/.test(selectedText)) {\n        break;\n      } else {\n        editorState.replaceSelection(\"# \" + selectedText);\n      }\n      editorState.focus();\n      break;\n    case \"bold\":\n      editorState.replaceSelection(\"**\" + (selectedText || \" \") + \"**\");\n      editorState.focus();\n      break;\n    case \"italic\":\n      editorState.replaceSelection(\"*\" + (selectedText || \" \") + \"*\");\n      editorState.focus();\n      break;\n    case \"strikethrough\":\n      editorState.replaceSelection(\"~~\" + (selectedText || \" \") + \"~~\");\n      editorState.focus();\n      break;\n    case \"hr\":\n      editorState.setCursor(cursor.line + 1, 0);\n      editorState.replaceSelection(\"\\n\\n---\\n\");\n      editorState.focus();\n      break;\n    case (type.match(/h[1-6]{1}/) || {}).input:\n      editorState.setCursor(cursor.line, 0);\n      editorState.replaceSelection(\"#\".repeat(Number(type[1])) + \" \");\n      editorState.focus();\n      break;\n    case \"table\":\n      const sampleTable =\n        \"\\n| Tables        | Are           | Cool  |\\n\" +\n        \"| ------------- |:-------------:| -----:|\\n\" +\n        \"| col 3 is      | right-aligned | $1600 |\\n\" +\n        \"| col 2 is      | centered      |   $12 |\\n\" +\n        \"| zebra stripes | are neat      |    $1 |\\n\";\n      editorState.setCursor(cursor.line, 0);\n      editorState.replaceSelection(sampleTable);\n      editorState.focus();\n      break;\n    case \"code\":\n      editorState.replaceSelection(\n        `\\n\\`\\`\\`language\\n${selectedText}\\n\\`\\`\\`\\n`\n      );\n      editorState.focus();\n      break;\n    default:\n      editorState.replaceSelection(selectedText);\n  }\n};\n\n// https://stackoverflow.com/a/44661948/6781563\nexport const handleDownloadClick = ({ editorState, fileName }) => {\n  const element = document.createElement(\"a\");\n  let markdownValue = \"\";\n  if (!isEmpty(editorState)) {\n    markdownValue = editorState.getValue();\n  }\n  const file = new Blob([markdownValue], {\n    type: \"text/plain\"\n  });\n  element.href = URL.createObjectURL(file);\n  element.download = fileName;\n  document.body.appendChild(element); // Required for this to work in FireFox\n  element.click();\n};\n\n// https://github.com/elfrog/apib-editor/blob/master/src/platform/web/app-service.js\nexport const handleUploadClick = async ({ event, handleNewFileUpload }) => {\n  const fileSelector = document.createElement(\"input\");\n  fileSelector.type = \"file\";\n\n  fileSelector.onchange = async e => {\n    const file = e.target.files[0];\n    let fileContent;\n    try {\n      fileContent = await readTextFile(file);\n      handleNewFileUpload(fileContent);\n    } catch (e) {\n      console.error(e);\n    }\n  };\n\n  event.preventDefault();\n  fileSelector.click();\n};\n\n// TODO\n// Create a custom hook\nexport const fetchAllRepositories = async ({\n  client,\n  setLoading,\n  setData,\n  query\n}) => {\n  let hasNextPage = true;\n  let cursor = null;\n  let allResults = null;\n\n  while (hasNextPage) {\n    const { data } = await client.query({\n      query: query,\n      variables: {\n        cursor\n      },\n      fetchPolicy: \"no-cache\"\n    });\n\n    if (isEmpty(allResults)) {\n      allResults = data;\n    } else {\n      allResults.viewer.repositories.pageInfo =\n        data.viewer.repositories.pageInfo;\n      allResults.viewer.repositories.nodes = [\n        ...allResults.viewer.repositories.nodes,\n        ...data.viewer.repositories.nodes\n      ];\n    }\n\n    hasNextPage = data.viewer.repositories.pageInfo.hasNextPage;\n    cursor = data.viewer.repositories.pageInfo.endCursor;\n  }\n  setLoading(false);\n  setData(allResults);\n};\n\n// Not used anymore. Can be removed\nexport const findSolitudeRepository = data => {\n  const solitudeGeneratedRepo = `{data.viewer.login}-solitude-notes`;\n  const expectedRepo = data.viewer.repositories.nodes.find(\n    repo => repo.name === solitudeGeneratedRepo\n  );\n  return expectedRepo;\n};\n\nexport const calculateSolitudeRepoName = ownerName => {\n  return `${ownerName}-solitude-notes`;\n};\n\nexport const buildGitHubLink = clientId => {\n  const gitHubLink = `https://github.com/login/oauth/authorize?client_id=${clientId}&scope=repo`;\n  return gitHubLink;\n};\n\nexport const buildRepositoryCreationInput = (\n  repositoryId,\n  ownerId,\n  ownerName\n) => {\n  return {\n    repoName: `${ownerName}-solitude-notes`,\n    templateRepositoryId: repositoryId,\n    ownerId\n  };\n};\n\nexport const buildNoteList = notes => {\n  let noteList = [];\n  notes.forEach(note => {\n    const indexNote = note.object.entries.find(\n      entry => entry.name === \"index.md\"\n    );\n\n    noteList = [\n      ...noteList,\n      {\n        name: note.name,\n        oid: note.oid,\n        text: indexNote.object.text,\n        sha: indexNote.oid\n      }\n    ];\n  });\n  return noteList;\n};\n\nexport const buildRestUrl = (method, owner, repoName, path) => {\n  if (method === \"DELETE_FILE\") {\n    return `https://api.github.com/repos/${owner}/${repoName}/contents/${path}`;\n  }\n  if (method === \"CREATE_FILE\") {\n    return `https://api.github.com/repos/${owner}/${repoName}/contents/${path}`;\n  }\n};\n","import React, { useState } from \"react\";\nimport { Modal } from \"antd\";\n\nconst CustomModal = ({\n  modalTitle = \"Custom modal\",\n  isModalOpen,\n  modalBody,\n  onModalClose\n}) => {\n  return (\n    <Modal\n      title={modalTitle}\n      visible={isModalOpen}\n      onOk={() => onModalClose()}\n      onCancel={() => onModalClose()}\n    >\n      {modalBody}\n    </Modal>\n  );\n};\n\nexport default CustomModal;\n","import React from \"react\";\nimport {\n  AiOutlineBold,\n  AiOutlineCode,\n  AiOutlineItalic,\n  AiOutlineGithub,\n  AiOutlineOrderedList,\n  AiOutlineUnorderedList,\n  AiOutlineUnderline,\n  AiOutlineStrikethrough,\n  AiOutlineSave,\n  AiOutlineHighlight,\n  AiOutlineTable,\n  AiOutlineFontSize,\n  AiOutlineMinus,\n  AiOutlineFolderOpen\n} from \"react-icons/ai\";\n\nimport { FaGithub } from \"react-icons/fa\";\nimport { GoGithubAction } from \"react-icons/go\";\n\nimport GitHubUser from \"../../components/gitHubUser/GitHubUser.js\";\nimport config from \"../../data/config.json\";\nimport {\n  handleRichTextButtonClick,\n  handleDownloadClick,\n  handleUploadClick\n} from \"../../utils/utils.js\";\n\nimport CustomModal from \"../../shared/customModal/CustomModal.js\";\n\nconst Toolbar = ({\n  editorState,\n  token,\n  handleNewFileUpload,\n  handleModalOpen\n}) => {\n  return (\n    <div className=\"toolbar\">\n      <ul>\n        <li\n          onClick={() =>\n            handleRichTextButtonClick({ type: \"header\", editorState })\n          }\n        >\n          <AiOutlineFontSize width=\"22\" height=\"22\" />\n        </li>\n        <li\n          onClick={() =>\n            handleRichTextButtonClick({ type: \"bold\", editorState })\n          }\n        >\n          <AiOutlineBold width=\"22\" height=\"22\" />\n        </li>\n        <li\n          onClick={() =>\n            handleRichTextButtonClick({ type: \"italic\", editorState })\n          }\n        >\n          <AiOutlineItalic width=\"22\" height=\"22\" />\n        </li>\n        <li\n          onClick={() =>\n            handleRichTextButtonClick({ type: \"strikethrough\", editorState })\n          }\n        >\n          <AiOutlineStrikethrough width=\"22\" height=\"22\" />\n        </li>\n        <li\n          onClick={() => handleRichTextButtonClick({ type: \"hr\", editorState })}\n        >\n          <AiOutlineMinus width=\"22\" height=\"22\" />\n        </li>\n        <li\n          onClick={() =>\n            handleRichTextButtonClick({ type: \"table\", editorState })\n          }\n        >\n          <AiOutlineTable width=\"22\" height=\"22\" />\n        </li>\n        <li\n          onClick={() =>\n            handleRichTextButtonClick({ type: \"code\", editorState })\n          }\n        >\n          <AiOutlineCode width=\"22\" height=\"22\" />\n        </li>\n      </ul>\n      <ul>\n        {!token ? (\n          <li>\n            <a\n              href={`https://github.com/login/oauth/authorize?client_id=${config.GITHUB_APP_CLIENT_ID}&scope=repo`}\n            >\n              <FaGithub width=\"22\" height=\"20\" />\n            </a>\n          </li>\n        ) : (\n          <>\n            <li onClick={() => handleModalOpen({ modalType: \"GIT_MODAL\" })}>\n              <GoGithubAction width=\"22\" height=\"20\" />\n            </li>\n          </>\n        )}\n        <li\n          onClick={event =>\n            handleUploadClick({ event: event, handleNewFileUpload })\n          }\n        >\n          <AiOutlineFolderOpen width=\"22\" height=\"22\" />\n        </li>\n        <li\n          onClick={() =>\n            // Change filename later\n            handleDownloadClick({ fileName: \"solitude.md\", editorState })\n          }\n        >\n          <AiOutlineSave width=\"22\" height=\"22\" />\n        </li>\n        {token && (\n          <li>\n            <GitHubUser />\n          </li>\n        )}\n      </ul>\n    </div>\n  );\n};\n\nexport default Toolbar;\n","import React from \"react\";\nimport Toolbar from \"./Toolbar.js\";\nimport { connect } from \"react-redux\";\nimport { updateMarkdownValue, showModal, hideModal } from \"../../actions\";\n\nconst mapDispatchToProps = dispatch => ({\n  handleNewFileUpload: value => dispatch(updateMarkdownValue(value)),\n  handleModalOpen: modalState => dispatch(showModal(modalState))\n  //handleModalClose: modalState => dispatch(hideModal(modalState))\n});\n\nconst mapStateToProps = state => ({\n  editorState: state.editor,\n  token: state.auth.token\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Toolbar);\n","import React from \"react\";\nimport { Button } from \"antd\";\n\nconst CustomButton = ({ onClick, style, label, ...props }) => {\n  return (\n    <Button onClick={e => onClick(e)} style={style}>\n      {label}\n    </Button>\n  );\n};\n\nexport default CustomButton;\n","import React from \"react\";\nimport { Tag } from \"antd\";\n\nconst CustomTag = ({ onClick, style, label, ...props }) => {\n  style = { cursor: \"pointer\", ...style };\n  return (\n    <Tag onClick={e => onClick(e)} style={style} {...props}>\n      {label}\n    </Tag>\n  );\n};\n\nexport default CustomTag;\n","import React, { useState } from \"react\";\nimport { List } from \"antd\";\nimport CustomTag from \"../../shared/customTag/CustomTag.js\";\nimport { Input } from \"antd\";\nconst { Search } = Input;\n\nconst NoteList = ({ notes, loadNote, deleteNote, saveNote, createNote }) => {\n  const [noteName, setNoteName] = useState(\"\");\n  return (\n    <div>\n      <List\n        bordered={true}\n        split={true}\n        dataSource={notes}\n        renderItem={item => (\n          <List.Item\n            key={item.oid}\n            actions={[\n              <CustomTag\n                color=\"cyan\"\n                key=\"note-edit\"\n                onClick={() => loadNote(item)}\n                label=\"edit\"\n              />,\n              <CustomTag\n                key=\"note-sync\"\n                color=\"green\"\n                key=\"note-save\"\n                onClick={() => createNote()}\n                label=\"save\"\n              />,\n              <CustomTag\n                key=\"note-sync\"\n                color=\"red\"\n                key=\"note-delete\"\n                onClick={() => deleteNote(item)}\n                label=\"delete\"\n              />\n            ]}\n            style={{\n              display: \"flex\",\n              justifyContent: \"space-between\"\n            }}\n          >\n            <div>{item.name}</div>\n          </List.Item>\n        )}\n      />\n      <br />\n      <Search\n        enterButton=\"Add Note\"\n        size=\"medium\"\n        value={noteName}\n        onChange={event => setNoteName(event.target.value)}\n        onSearch={value => {\n          value && createNote(value);\n          setNoteName(\"\");\n        }}\n      />\n    </div>\n  );\n};\n\nexport default NoteList;\n\n/*\nconst LOAD_NOTE = gql`\n  query LoadNote($owner: String!, $name: String!, $expression: String!) {\n    repository(owner: $owner, name: $name) {\n      id\n      name\n      nameWithOwner\n      note: object(expression: $expression) {\n        ... on Blob {\n          text\n          byteSize\n          commitUrl\n        }\n      }\n    }\n  }\n`;\n*/\n","import React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { updateMarkdownValue, hideModal } from \"../../actions\";\nimport { buildRestUrl } from \"../../utils/utils.js\";\nimport NoteList from \"./NoteList.js\";\n\nconst NoteListContainer = ({ refetchList }) => {\n  const dispatch = useDispatch();\n  const notes = useSelector(state => state.notes);\n  const repository = useSelector(state => state.repository);\n  const auth = useSelector(state => state.auth);\n\n  const loadNote = item => {\n    dispatch(updateMarkdownValue(item.text));\n    dispatch(hideModal());\n  };\n\n  const deleteNote = item => {\n    const URI = buildRestUrl(\n      \"DELETE_FILE\",\n      repository.nameWithOwner.split(\"/\")[0],\n      repository.nameWithOwner.split(\"/\")[1],\n      `notes/${item.name}/index.md`\n    );\n\n    const deleteBody = {\n      message: \"Delete Note(solitude-bot)\",\n      sha: item.sha\n    };\n\n    const headers = {\n      Authorization: `Bearer ${auth.token}`,\n      \"Content-Type\": \"application/json\"\n    };\n\n    fetch(URI, {\n      method: \"DELETE\",\n      body: JSON.stringify(deleteBody),\n      headers: headers\n    })\n      .then(response => response.text())\n      .then(result => {\n        refetchList();\n        //console.log(result);\n      })\n      .catch(error => console.log(\"error\", error));\n  };\n\n  const saveNote = item => {\n    console.log(\"SaveNote\");\n  };\n\n  const createNote = noteName => {\n    // TODO\n    // Validate whether the note name already exists\n    const URI = buildRestUrl(\n      \"CREATE_FILE\",\n      repository.nameWithOwner.split(\"/\")[0],\n      repository.nameWithOwner.split(\"/\")[1],\n      `notes/${noteName}/index.md`\n    );\n\n    const createBody = {\n      message: `Create Note ${noteName}.(solitude-bot)`,\n      content: btoa(\"# \" + noteName)\n    };\n\n    const headers = {\n      Authorization: `Bearer ${auth.token}`,\n      \"Content-Type\": \"application/json\"\n    };\n\n    fetch(URI, {\n      method: \"PUT\",\n      body: JSON.stringify(createBody),\n      headers: headers\n    })\n      .then(response => response.text())\n      .then(result => {\n        refetchList();\n        //console.log(result);\n      })\n      .catch(error => console.log(\"error\", error));\n  };\n\n  return (\n    <NoteList\n      notes={notes}\n      loadNote={loadNote}\n      deleteNote={deleteNote}\n      saveNote={saveNote}\n      createNote={createNote}\n    />\n  );\n};\n\nexport default NoteListContainer;\n","import React, { useState, useEffect } from \"react\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { gql } from \"apollo-boost\";\nimport { calculateSolitudeRepoName, buildNoteList } from \"../../utils/utils.js\";\nimport NoteListContainer from \"../noteList/NoteListContainer.js\";\nimport { isEmpty } from \"lodash\";\n\nconst FIND_SOLITUDE_NOTE_REPO = gql`\n  query LoadNote($owner: String!, $name: String!, $expression: String!) {\n    repository(owner: $owner, name: $name) {\n      id\n      name\n      nameWithOwner\n      notes: object(expression: $expression) {\n        ... on Tree {\n          entries {\n            name\n            oid\n            object {\n              ... on Tree {\n                entries {\n                  name\n                  oid\n                  object {\n                    id\n                    ... on Blob {\n                      text\n                    }\n                  }\n                }\n              }\n              commitUrl\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\nconst FindSolitudeRepository = ({ updateRepository, updateNotesList }) => {\n  const [reloadNotes, setReloadNotes] = useState(true);\n  const owner = useSelector(state => state.auth.userName);\n  const dispatch = useDispatch();\n  const repoName = calculateSolitudeRepoName(owner);\n  const variables = {\n    owner,\n    name: repoName,\n    expression: \"master:notes/\"\n  };\n\n  const { loading, error, data, refetch } = useQuery(FIND_SOLITUDE_NOTE_REPO, {\n    variables,\n    fetchPolicy: \"no-cache\"\n  });\n\n  useEffect(() => {\n    const onCompleted = data => {\n      const { id, name, nameWithOwner, notes } = data.repository;\n      let noteList = [];\n      if (!isEmpty(notes)) {\n        noteList = buildNoteList(notes[\"entries\"]);\n      }\n      updateNotesList(noteList);\n      updateRepository({ id, name, nameWithOwner, loading });\n    };\n    const onError = error => {\n      updateRepository({ loading });\n      console.log(error);\n    };\n    if (onCompleted || onError) {\n      if (onCompleted && !loading && !error) {\n        onCompleted(data);\n      } else if (onError && !loading && error) {\n        onError(error);\n      }\n    }\n  }, [loading, data, error]);\n\n  return (\n    <div>\n      {!loading ? (\n        <>\n          {!data ? (\n            <p>No solitude managed repository exists!</p>\n          ) : (\n            <div>\n              <h3>{data.repository.nameWithOwner}</h3>\n              <NoteListContainer refetchList={refetch} />\n            </div>\n          )}\n        </>\n      ) : (\n        <span>Loading...</span>\n      )}\n    </div>\n  );\n};\n\nexport default FindSolitudeRepository;\n\n// Old list github list\n/*\nconst FIND_SOLITUDE_NOTE_REPO = gql`\n  query SolitudeNoteRepo($owner: String!, $name: String!) {\n    repository(owner: $owner, name: $name) {\n      id\n      name\n      nameWithOwner\n      templateRepository {\n        id\n        name\n      }\n      notes: object(expression: \"master:notes/\") {\n        ... on Tree {\n          entries {\n            oid\n            object {\n              ... on Blob {\n                text\n                commitUrl\n              }\n            }\n            name\n          }\n        }\n      }\n    }\n  }\n`;\n*/\n","import React, { useEffect } from \"react\";\nimport { gql } from \"apollo-boost\";\nimport { useMutation } from \"@apollo/react-hooks\";\nimport CustomButton from \"../../shared/customButton/CustomButton.js\";\nimport config from \"../../data/config.json\";\nimport { buildRepositoryCreationInput } from \"../../utils/utils.js\";\n\nconst CREATE_SOLITUDE_NOTES_REPOSITORY = gql`\n  mutation CreateSolitudeNotesRepository(\n    $repoName: String!\n    $templateRepositoryId: String!\n    $ownerId: String!\n  ) {\n    cloneTemplateRepository(\n      input: {\n        name: $repoName\n        repositoryId: $templateRepositoryId\n        ownerId: $ownerId\n        visibility: PRIVATE\n      }\n    ) {\n      repository {\n        name\n      }\n    }\n  }\n`;\n\nconst CreateRepository = ({ auth, updateRepository }) => {\n  const [createRepo, { data }] = useMutation(CREATE_SOLITUDE_NOTES_REPOSITORY);\n  const variables = buildRepositoryCreationInput(\n    config.TEMPLATE_REPOSITORY_ID,\n    auth.id,\n    auth.userName\n  );\n\n  useEffect(() => {\n    console.log(data);\n    data &&\n      data.cloneTemplateRepository &&\n      updateRepository(data.cloneTemplateRepository.repository);\n  }, [data]);\n\n  return (\n    <CustomButton\n      label=\"Create\"\n      onClick={e => {\n        createRepo({ variables: variables });\n      }}\n    />\n  );\n};\n\nexport default CreateRepository;\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport GitModalContainer from \"./GitModalContainer.js\";\n\nconst MODAL_COMPONENTS = {\n  GIT_MODAL: GitModalContainer\n};\n\nconst RootModalContainer = ({ modal }) => {\n  console.log(modal.modalType);\n  if (!modal.modalType) return null;\n\n  const SpecificModal = MODAL_COMPONENTS[modal.modalType];\n  return <SpecificModal {...modal} />;\n};\n\nconst mapStateToProps = state => ({\n  modal: state.modal\n});\n\nexport default connect(mapStateToProps)(RootModalContainer);\n","import React, { useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport { hideModal } from \"../../actions\";\nimport config from \"../../data/config.json\";\nimport CustomModal from \"../../shared/customModal/CustomModal.js\";\nimport CustomButton from \"../../shared/customButton/CustomButton.js\";\nimport FindSolitudeRepository from \"../../components/findSolitdueRepository/FindSolitudeRepository.js\";\nimport CreateRepository from \"../../components/createRepository/CreateRepository.js\";\nimport { registerSolitudeRepo, updateNoteList } from \"../../actions\";\nimport { buildGitHubLink } from \"../../utils/utils.js\";\n\nconst GitModalContainer = ({\n  auth,\n  isOpen,\n  modalProps,\n  hideModal,\n  updateRepository,\n  updateNotesList,\n  repository\n}) => {\n  const onGitConnectClick = e => {\n    e.preventDefault();\n    const gitHubLink = buildGitHubLink(config.GITHUB_APP_CLIENT_ID);\n    window.location.href = gitHubLink;\n  };\n\n  useEffect(() => {\n    // Set loading true on every time we open the modal\n    updateRepository({ loading: true });\n  }, []);\n\n  // Create a repository if doesn't exist already\n\n  return (\n    <CustomModal\n      isModalOpen={isOpen}\n      modalTitle={\"Your notes\"}\n      modalBody={\n        auth.token ? (\n          <div>\n            <FindSolitudeRepository\n              updateRepository={updateRepository}\n              updateNotesList={updateNotesList}\n            />\n            {!repository.loading && !repository.name && (\n              <CreateRepository\n                auth={auth}\n                updateRepository={updateRepository}\n              />\n            )}\n          </div>\n        ) : (\n          <CustomButton\n            label=\"Connect to GitHub\"\n            onClick={e => onGitConnectClick(e)}\n          />\n        )\n      }\n      onModalClose={hideModal}\n    />\n  );\n};\n\nconst mapStateToProps = state => ({\n  auth: state.auth,\n  repository: state.repository\n});\n\nconst mapDispatchToProps = dispatch => ({\n  hideModal: () => dispatch(hideModal()),\n  updateRepository: repo => dispatch(registerSolitudeRepo(repo)),\n  updateNotesList: notesList => dispatch(updateNoteList(notesList))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(GitModalContainer);\n","import ApolloClient from \"apollo-boost\";\nimport { setContext } from \"apollo-link-context\";\n\nconst authClient = token => {\n  const client = new ApolloClient({\n    uri: \"https://api.github.com/graphql\",\n\n    request: operation => {\n      //const token = localStorage.getItem(\"token\");\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : \"\"\n        }\n      });\n    }\n  });\n  return client;\n};\n\nexport default authClient;\n","import React, { useState, useEffect } from \"react\";\nimport AppbarContainer from \"./components/appbar/AppbarContainer.js\";\nimport SplitViewContainer from \"./components/splitView/SplitViewContainer.js\";\nimport ToolbarContainer from \"./components/toolbar/ToolbarContainer.js\";\nimport RootModalContainer from \"./components/modal/RootModalContainer.js\";\nimport { updateToken } from \"./actions\";\n\nimport { ApolloProvider } from \"@apollo/react-hooks\";\nimport authClient from \"./auth/AuthClient.js\";\nimport { isEmpty } from \"lodash\";\nimport { connect } from \"react-redux\";\n\nimport \"antd/dist/antd.css\";\nimport \"./styles/App.css\";\nimport \"./styles/Resizer.css\";\nimport \"./styles/ResultPane.css\";\n\nfunction App({ onTokenChange, authToken }) {\n  const [token, setToken] = useState(\"\");\n\n  useEffect(() => {\n    let code =\n      window.location.href.match(/\\?code=(.*)/) &&\n      window.location.href.match(/\\?code=(.*)/)[1];\n    if (code) {\n      fetch(`https://solitudenote-gitkeeper.glitch.me/authenticate/${code}`)\n        .then(response => response.json())\n        .then(({ error, access_token }) => {\n          if (error) {\n            throw Error(error);\n          }\n          console.log(access_token);\n          setToken(access_token);\n          // Store token in redux\n          onTokenChange(access_token);\n        })\n        .catch(error => {\n          console.log(error);\n        });\n    }\n  }, []);\n\n  const client = authClient(token);\n  return (\n    <div>\n      <ApolloProvider client={client}>\n        <AppbarContainer />\n        <ToolbarContainer />\n        <SplitViewContainer />\n        <RootModalContainer />\n      </ApolloProvider>\n    </div>\n  );\n}\n\nconst mapStateToProps = state => ({\n  authToken: state.auth.token\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onTokenChange: token => dispatch(updateToken(token))\n});\n\nexport default connect(null, mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const editor = (state = {}, action) => {\n  switch (action.type) {\n    case \"UPDATE_EDITOR_STATE\":\n      return action.editorState || state;\n    default:\n      return state;\n  }\n};\n\nexport default editor;\n","const splitPane = (state = { size: \"50%\" }, action) => {\n  switch (action.type) {\n    case \"UPDATE_PANE_SIZE\":\n      return { ...state, size: action.size };\n    default:\n      return state;\n  }\n};\n\nexport default splitPane;\n","const markdownValue = (state = \"\", action) => {\n  switch (action.type) {\n    case \"UPDATE_MARKDOWN_VALUE\":\n      return action.text;\n    default:\n      return state;\n  }\n};\n\nexport default markdownValue;\n","const auth = (state = { token: \"\" }, action) => {\n  switch (action.type) {\n    case \"UPDATE_TOKEN\":\n      return { ...state, token: action.token };\n    case \"UPDATE_GIT_USER\":\n      return { ...state, userName: action.login, id: action.id };\n    default:\n      return state;\n  }\n};\n\nexport default auth;\n","let initialState = {};\nconst modal = (state = initialState, action) => {\n  switch (action.type) {\n    case \"SHOW_MODAL\":\n      return {\n        ...state,\n        isOpen: true,\n        modalType: action.modalType,\n        modalProps: action.modalProps\n      };\n    case \"HIDE_MODAL\":\n      return { ...initialState, isOpen: false };\n    default:\n      return state;\n  }\n};\n\nexport default modal;\n","const initialState = {\n  loading: true\n};\nconst repository = (state = initialState, action) => {\n  switch (action.type) {\n    case \"REGISTER_SOLITUDE_REPO\":\n      return { ...state, ...action.repo };\n    case \"UPDATE_SOLITUDE_REPO\":\n      return { ...state, ...action.repo };\n    default:\n      return state;\n  }\n};\n\nexport default repository;\n","const notes = (state = [], action) => {\n  switch (action.type) {\n    case \"UPDATE_NOTE_LIST\":\n      return [...action.list];\n    case \"DELETE_NOTE\":\n      return [...action.list];\n    case \"ADD_NOTE\":\n      return [...action.list];\n    default:\n      return state;\n  }\n};\n\nexport default notes;\n","import { combineReducers } from \"redux\";\nimport editor from \"./editor.js\";\nimport splitPane from \"./splitPane.js\";\nimport markdownValue from \"./markdown.js\";\nimport auth from \"./auth.js\";\nimport modal from \"./modal.js\";\nimport repository from \"./repository.js\";\nimport notes from \"./notes.js\";\n\nexport default combineReducers({\n  markdownValue,\n  editor,\n  splitPane,\n  modal,\n  auth,\n  repository,\n  notes\n});\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\n// Redux\nimport { Provider } from \"react-redux\";\nimport { createStore } from \"redux\";\nimport rootReducer from \"./reducers\";\n\nconst store = createStore(\n  rootReducer,\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}