{"version":3,"sources":["actions/index.js","components/appbar/Appbar.js","components/appbar/AppbarContainer.js","components/customEditor/CustomEditor.js","components/customEditor/CustomEditorContainer.js","components/codeBlock/CodeBlock.js","components/resultPane/ResultPane.js","components/splitView/SplitView.js","components/splitView/SplitViewContainer.js","components/gitHubUser/GitHubUser.js","utils/utils.js","shared/customModal/CustomModal.js","components/toolbar/Toolbar.js","components/toolbar/ToolbarContainer.js","shared/customButton/CustomButton.js","components/findSolitdueRepository/FindSolitudeRepository.js","components/createRepository/CreateRepository.js","components/modal/RootModalContainer.js","components/modal/GitModalContainer.js","auth/AuthClient.js","App.js","serviceWorker.js","reducers/editor.js","reducers/splitPane.js","reducers/markdown.js","reducers/auth.js","reducers/modal.js","reducers/repository.js","reducers/index.js","index.js"],"names":["updateMarkdownValue","text","type","updatePaneSize","size","Appbar","onViewModeChange","className","width","height","onClick","connect","dispatch","value","CustomEditor","onValueChange","onSelectedEditorChange","markdownValue","options","mode","lineNumbers","spellcheck","theme","onBeforeChange","editor","data","onSelection","state","editorState","CodeBlock","this","props","language","style","base16AteliersulphurpoolLight","PureComponent","defaultProps","source","escapeHtml","renderers","code","SplitView","paneSize","onPaneSizeChange","split","defaultSize","onDragFinished","CustomEditorContainer","splitPane","LIST_REPO_QUERY","gql","ListRepository","useQuery","loading","error","useDispatch","viewer","login","userName","src","avatarUrl","readTextFile","file","Promise","resolve","reject","reader","FileReader","onload","e","target","result","onerror","readAsText","handleRichTextButtonClick","isEmpty","selectedText","getSelection","cursor","getCursor","setCursor","line","A1","A2","ch","B1","findWordAt","anchor","B2","head","setSelection","test","replaceSelection","focus","match","input","repeat","Number","CustomModal","modalTitle","isModalOpen","modalBody","onModalClose","title","visible","onOk","onCancel","Toolbar","token","handleNewFileUpload","handleModalOpen","modalType","href","config","GITHUB_APP_CLIENT_ID","event","a","async","fileSelector","document","createElement","onchange","files","fileContent","console","preventDefault","click","handleUploadClick","fileName","element","getValue","Blob","URL","createObjectURL","download","body","appendChild","GitHubUser","auth","modalState","modalProps","CustomButton","label","FIND_SOLITUDE_NOTE_REPO","FindSolitudeRepository","updateRepository","owner","useSelector","variables","name","fetchPolicy","useEffect","onCompleted","repository","id","nameWithOwner","onError","log","CREATE_SOLITUDE_NOTES_REPOSITORY","CreateRepository","useMutation","createRepo","MODAL_COMPONENTS","GIT_MODAL","hideModal","repo","registerSolitudeRepo","isOpen","clientId","gitHubLink","window","location","onGitConnectClick","modal","SpecificModal","authClient","ApolloClient","uri","request","operation","setContext","headers","authorization","onTokenChange","updateToken","authToken","useState","setToken","fetch","then","response","json","Error","catch","client","AppbarContainer","ToolbarContainer","SplitViewContainer","Boolean","hostname","action","initialState","combineReducers","store","createStore","rootReducer","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6a3f4e7c.chunk.js","sourcesContent":["export const updateMarkdownValue = text => ({\n  type: \"UPDATE_MARKDOWN_VALUE\",\n  text\n});\n\nexport const updateEditorState = editorState => ({\n  type: \"UPDATE_EDITOR_STATE\",\n  editorState\n});\n\nexport const updatePaneSize = size => ({\n  type: \"UPDATE_PANE_SIZE\",\n  size\n});\n\nexport const updateToken = token => ({\n  type: \"UPDATE_TOKEN\",\n  token\n});\n\nexport const updateUser = userName => ({\n  type: \"UPDATE_GIT_USER\",\n  userName\n});\n\nexport const showModal = ({ modalType, modalProps }) => ({\n  type: \"SHOW_MODAL\",\n  modalType,\n  modalProps\n});\n\nexport const hideModal = () => ({\n  type: \"HIDE_MODAL\"\n});\n\nexport const registerSolitudeRepo = repo => ({\n  type: \"REGISTER_SOLITUDE_REPO\",\n  repo\n});\n","import React from \"react\";\nimport { MdFormatAlignLeft } from \"react-icons/md\";\nimport { MdChromeReaderMode } from \"react-icons/md\";\nimport { TiEye } from \"react-icons/ti/\";\nimport \"../../styles/Appbar.css\";\n\nconst Appbar = ({ onViewModeChange }) => {\n  return (\n    <div className=\"appbar\">\n      <div className=\"logo\">\n        <span>Solitude</span>\n      </div>\n\n      <div className=\"modebar\">\n        <MdFormatAlignLeft\n          width=\"22\"\n          height=\"22\"\n          onClick={() => onViewModeChange(\"100%\")}\n        />\n        <MdChromeReaderMode\n          width=\"22\"\n          height=\"22\"\n          onClick={() => onViewModeChange(\"50%\")}\n        />\n        <TiEye width=\"22\" height=\"22\" onClick={() => onViewModeChange(\"0%\")} />\n      </div>\n    </div>\n  );\n};\n\nexport default Appbar;\n","import { connect } from \"react-redux\";\nimport { updatePaneSize } from \"../../actions\";\nimport Appbar from \"./Appbar.js\";\n\nconst mapDispatchToProps = dispatch => ({\n  onViewModeChange: value => dispatch(updatePaneSize(value))\n});\n\nexport default connect(null, mapDispatchToProps)(Appbar);\n","import React, { useState } from \"react\";\nimport { Controlled as CodeMirror } from \"react-codemirror2\";\n\nimport \"codemirror/lib/codemirror.css\";\nimport \"codemirror/theme/neo.css\";\n// Import supported languages here\nimport \"codemirror/mode/javascript/javascript\";\nimport \"codemirror/mode/jsx/jsx\";\nimport \"codemirror/mode/python/python\";\nimport \"codemirror/mode/clike/clike\";\nimport \"codemirror/mode/css/css\";\nimport \"codemirror/mode/go/go\";\nimport \"codemirror/mode/rust/rust\";\nimport \"codemirror/mode/markdown/markdown\";\nimport \"codemirror/mode/gfm/gfm\";\nimport \"codemirror/mode/shell/shell\";\n\nimport \"../../styles/CodeMirror.css\";\n\nconst CustomEditor = ({\n  onValueChange,\n  onSelectedEditorChange,\n  markdownValue\n}) => {\n  return (\n    <CodeMirror\n      options={{\n        mode: \"gfm\",\n        lineNumbers: true,\n        spellcheck: true,\n        theme: \"neo\"\n        //autofocus: true,\n      }}\n      value={markdownValue}\n      onBeforeChange={(editor, data, value) => {\n        onValueChange(value);\n      }}\n      onSelection={(editor, data) => {\n        onSelectedEditorChange(editor);\n      }}\n      height=\"100%\"\n    />\n  );\n};\n\nexport default CustomEditor;\n\n// TODO\n// Editor is set to autofocus, and onFocus the editorState will be\n// updated.\n// Remove onFocus and add initialize the editorState with a codemirror\n// instance\n//onFocus={(editor, data) => {\n//onSelectedEditorChange(editor);\n//}}\n","import { connect } from \"react-redux\";\nimport { updateMarkdownValue, updateEditorState } from \"../../actions\";\nimport CustomEditor from \"./CustomEditor.js\";\n\nconst mapStateToProps = state => ({\n  markdownValue: state.markdownValue\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onValueChange: value => dispatch(updateMarkdownValue(value)),\n  onSelectedEditorChange: editor => dispatch(updateEditorState(editor))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CustomEditor);\n","import React, { PureComponent } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Prism as SyntaxHighlighter } from \"react-syntax-highlighter\";\nimport {\n  ghcolors,\n  hopscotch,\n  pojoaque,\n  vs,\n  xonokai,\n  base16AteliersulphurpoolLight,\n  cb,\n  prism\n} from \"react-syntax-highlighter/dist/esm/styles/prism\";\n\nclass CodeBlock extends PureComponent {\n  static propTypes = {\n    value: PropTypes.string.isRequired,\n    language: PropTypes.string\n  };\n\n  static defaultProps = {\n    language: null\n  };\n\n  render() {\n    const { language, value } = this.props;\n    return (\n      <SyntaxHighlighter\n        language={language}\n        style={base16AteliersulphurpoolLight}\n      >\n        {value}\n      </SyntaxHighlighter>\n    );\n  }\n}\n\nexport default CodeBlock;\n","import React from \"react\";\nimport ReactMarkdown from \"react-markdown\";\nimport CodeBlock from \"../codeBlock/CodeBlock\";\n\nimport { connect } from \"react-redux\";\n\nconst ResultPane = ({ markdownValue }) => {\n  return (\n    <ReactMarkdown\n      className={\"react-markdown\"}\n      source={markdownValue}\n      //source={\"\"}\n      escapeHtml={false}\n      renderers={{ code: CodeBlock }}\n    />\n  );\n};\n\nconst mapStateToProps = state => ({\n  markdownValue: state.markdownValue\n});\n\nexport default connect(mapStateToProps)(ResultPane);\n","import React from \"react\";\nimport SplitPane from \"react-split-pane\";\nimport CustomEditorContainer from \"../customEditor/CustomEditorContainer.js\";\nimport ResultPane from \"../resultPane/ResultPane.js\";\n\nconst SplitView = ({ paneSize, onPaneSizeChange }) => {\n  return (\n    <SplitPane\n      split=\"vertical\"\n      defaultSize={paneSize}\n      size={paneSize}\n      //defaultSize={parseInt(localStorage.getItem(\"splitPos\"), 10)}\n      //onChange={size => localStorage.setItem(\"splitPos\", size)}\n      onDragFinished={size => onPaneSizeChange(size)}\n    >\n      <div className=\"editor-pane\">\n        {paneSize !== \"0%\" && <CustomEditorContainer />}\n      </div>\n      <div className=\"result-pane\">\n        <ResultPane />\n      </div>\n    </SplitPane>\n  );\n};\n\nexport default SplitView;\n","import { connect } from \"react-redux\";\nimport { updatePaneSize } from \"../../actions\";\nimport SplitView from \"./SplitView.js\";\n\nconst mapStateToProps = state => ({\n  paneSize: state.splitPane.size\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onPaneSizeChange: value => dispatch(updatePaneSize(value))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SplitView);\n","import React from \"react\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport { useDispatch } from \"react-redux\";\nimport { gql } from \"apollo-boost\";\nimport { Avatar } from \"antd\";\nimport { updateUser } from \"../../actions\";\n\nconst LIST_REPO_QUERY = gql`\n  {\n    viewer {\n      login\n      avatarUrl\n    }\n  }\n`;\n\nconst ListRepository = () => {\n  const { loading, error, data } = useQuery(LIST_REPO_QUERY);\n  const dispatch = useDispatch();\n\n  // Update git user name in redux\n  if (data && data.viewer.login) {\n    dispatch(updateUser(data.viewer.login));\n  }\n\n  return <Avatar src={data && data.viewer.avatarUrl} size=\"small\" />;\n};\n\nexport default ListRepository;\n","import { isEmpty } from \"lodash\";\n\nexport const readTextFile = file => {\n  return new Promise((resolve, reject) => {\n    let reader = new FileReader();\n    // Listener\n    reader.onload = e => {\n      resolve(e.target.result);\n    };\n    reader.onerror = e => reject(e);\n\n    reader.readAsText(file);\n  });\n};\n\nexport const handleRichTextButtonClick = ({ type = \"\", editorState }) => {\n  // As we don't have the editor state initialized, return null\n  if (isEmpty(editorState)) return null;\n  let selectedText = editorState.getSelection();\n  let cursor = editorState.getCursor();\n\n  switch (type) {\n    case \"header\":\n      editorState.setCursor(cursor.line, 0);\n      // FIXME\n      // Use better variables\n      const A1 = editorState.getCursor().line;\n      const A2 = editorState.getCursor().ch;\n      const B1 = editorState.findWordAt({ line: A1, ch: A2 }).anchor.ch;\n      const B2 = editorState.findWordAt({ line: A1, ch: A2 }).head.ch;\n\n      editorState.setSelection({ line: A1, ch: B1 }, { line: A1, ch: B2 });\n      selectedText = editorState.getSelection();\n\n      // If header in range of h1-h5\n      if (/^#{1,5}$/.test(selectedText)) {\n        editorState.replaceSelection(selectedText + \"#\");\n      }\n      // If header is h6\n      else if (/^#{6,}$/.test(selectedText)) {\n        break;\n      } else {\n        editorState.replaceSelection(\"# \" + selectedText);\n      }\n      editorState.focus();\n      break;\n    case \"bold\":\n      editorState.replaceSelection(\"**\" + (selectedText || \" \") + \"**\");\n      editorState.focus();\n      break;\n    case \"italic\":\n      editorState.replaceSelection(\"*\" + (selectedText || \" \") + \"*\");\n      editorState.focus();\n      break;\n    case \"strikethrough\":\n      editorState.replaceSelection(\"~~\" + (selectedText || \" \") + \"~~\");\n      editorState.focus();\n      break;\n    case \"hr\":\n      editorState.setCursor(cursor.line + 1, 0);\n      editorState.replaceSelection(\"\\n\\n---\\n\");\n      editorState.focus();\n      break;\n    case (type.match(/h[1-6]{1}/) || {}).input:\n      editorState.setCursor(cursor.line, 0);\n      editorState.replaceSelection(\"#\".repeat(Number(type[1])) + \" \");\n      editorState.focus();\n      break;\n    case \"table\":\n      const sampleTable =\n        \"\\n| Tables        | Are           | Cool  |\\n\" +\n        \"| ------------- |:-------------:| -----:|\\n\" +\n        \"| col 3 is      | right-aligned | $1600 |\\n\" +\n        \"| col 2 is      | centered      |   $12 |\\n\" +\n        \"| zebra stripes | are neat      |    $1 |\\n\";\n      editorState.setCursor(cursor.line, 0);\n      editorState.replaceSelection(sampleTable);\n      editorState.focus();\n      break;\n    case \"code\":\n      editorState.replaceSelection(\n        `\\n\\`\\`\\`language\\n${selectedText}\\n\\`\\`\\`\\n`\n      );\n      editorState.focus();\n      break;\n    default:\n      editorState.replaceSelection(selectedText);\n  }\n};\n\n// https://stackoverflow.com/a/44661948/6781563\nexport const handleDownloadClick = ({ editorState, fileName }) => {\n  const element = document.createElement(\"a\");\n  let markdownValue = \"\";\n  if (!isEmpty(editorState)) {\n    markdownValue = editorState.getValue();\n  }\n  const file = new Blob([markdownValue], {\n    type: \"text/plain\"\n  });\n  element.href = URL.createObjectURL(file);\n  element.download = fileName;\n  document.body.appendChild(element); // Required for this to work in FireFox\n  element.click();\n};\n\n// https://github.com/elfrog/apib-editor/blob/master/src/platform/web/app-service.js\nexport const handleUploadClick = async ({ event, handleNewFileUpload }) => {\n  const fileSelector = document.createElement(\"input\");\n  fileSelector.type = \"file\";\n\n  fileSelector.onchange = async e => {\n    const file = e.target.files[0];\n    let fileContent;\n    try {\n      fileContent = await readTextFile(file);\n      handleNewFileUpload(fileContent);\n    } catch (e) {\n      console.error(e);\n    }\n  };\n\n  event.preventDefault();\n  fileSelector.click();\n};\n\n// TODO\n// Create a custom hook\nexport const fetchAllRepositories = async ({\n  client,\n  setLoading,\n  setData,\n  query\n}) => {\n  let hasNextPage = true;\n  let cursor = null;\n  let allResults = null;\n\n  while (hasNextPage) {\n    const { data } = await client.query({\n      query: query,\n      variables: {\n        cursor\n      },\n      fetchPolicy: \"no-cache\"\n    });\n\n    if (isEmpty(allResults)) {\n      allResults = data;\n    } else {\n      allResults.viewer.repositories.pageInfo =\n        data.viewer.repositories.pageInfo;\n      allResults.viewer.repositories.nodes = [\n        ...allResults.viewer.repositories.nodes,\n        ...data.viewer.repositories.nodes\n      ];\n    }\n\n    hasNextPage = data.viewer.repositories.pageInfo.hasNextPage;\n    cursor = data.viewer.repositories.pageInfo.endCursor;\n  }\n  setLoading(false);\n  setData(allResults);\n};\n\n// Not used anymore. Can be removed\nexport const findSolitudeRepository = data => {\n  const solitudeGeneratedRepo = `{data.viewer.login}-solitude-notes`;\n  const expectedRepo = data.viewer.repositories.nodes.find(\n    repo => repo.name === solitudeGeneratedRepo\n  );\n  return expectedRepo;\n};\n\nexport const calculateSolitudeRepoName = ownerName => {\n  return `${ownerName}-solitude-notes`;\n};\n\nexport const buildGitHubLink = clientId => {\n  const gitHubLink = `https://github.com/login/oauth/authorize?client_id=${clientId}&scope=repo`;\n  return gitHubLink;\n};\n","import React, { useState } from \"react\";\nimport { Modal } from \"antd\";\n\nconst CustomModal = ({\n  modalTitle = \"Custom modal\",\n  isModalOpen,\n  modalBody,\n  onModalClose\n}) => {\n  return (\n    <Modal\n      title={modalTitle}\n      visible={isModalOpen}\n      onOk={() => onModalClose()}\n      onCancel={() => onModalClose()}\n    >\n      {modalBody}\n    </Modal>\n  );\n};\n\nexport default CustomModal;\n","import React from \"react\";\nimport {\n  AiOutlineBold,\n  AiOutlineCode,\n  AiOutlineItalic,\n  AiOutlineGithub,\n  AiOutlineOrderedList,\n  AiOutlineUnorderedList,\n  AiOutlineUnderline,\n  AiOutlineStrikethrough,\n  AiOutlineSave,\n  AiOutlineHighlight,\n  AiOutlineTable,\n  AiOutlineFontSize,\n  AiOutlineMinus,\n  AiOutlineFolderOpen\n} from \"react-icons/ai\";\n\nimport { FaGithub } from \"react-icons/fa\";\nimport { GoGithubAction } from \"react-icons/go\";\n\nimport GitHubUser from \"../../components/gitHubUser/GitHubUser.js\";\nimport config from \"../../data/config.json\";\nimport {\n  handleRichTextButtonClick,\n  handleDownloadClick,\n  handleUploadClick\n} from \"../../utils/utils.js\";\n\nimport CustomModal from \"../../shared/customModal/CustomModal.js\";\n\nconst Toolbar = ({\n  editorState,\n  token,\n  handleNewFileUpload,\n  handleModalOpen\n}) => {\n  return (\n    <div className=\"toolbar\">\n      <ul>\n        <li\n          onClick={() =>\n            handleRichTextButtonClick({ type: \"header\", editorState })\n          }\n        >\n          <AiOutlineFontSize width=\"22\" height=\"22\" />\n        </li>\n        <li\n          onClick={() =>\n            handleRichTextButtonClick({ type: \"bold\", editorState })\n          }\n        >\n          <AiOutlineBold width=\"22\" height=\"22\" />\n        </li>\n        <li\n          onClick={() =>\n            handleRichTextButtonClick({ type: \"italic\", editorState })\n          }\n        >\n          <AiOutlineItalic width=\"22\" height=\"22\" />\n        </li>\n        <li\n          onClick={() =>\n            handleRichTextButtonClick({ type: \"strikethrough\", editorState })\n          }\n        >\n          <AiOutlineStrikethrough width=\"22\" height=\"22\" />\n        </li>\n        <li\n          onClick={() => handleRichTextButtonClick({ type: \"hr\", editorState })}\n        >\n          <AiOutlineMinus width=\"22\" height=\"22\" />\n        </li>\n        <li\n          onClick={() =>\n            handleRichTextButtonClick({ type: \"table\", editorState })\n          }\n        >\n          <AiOutlineTable width=\"22\" height=\"22\" />\n        </li>\n        <li\n          onClick={() =>\n            handleRichTextButtonClick({ type: \"code\", editorState })\n          }\n        >\n          <AiOutlineCode width=\"22\" height=\"22\" />\n        </li>\n      </ul>\n      <ul>\n        {!token ? (\n          <li>\n            <a\n              href={`https://github.com/login/oauth/authorize?client_id=${config.GITHUB_APP_CLIENT_ID}&scope=repo`}\n            >\n              <FaGithub width=\"22\" height=\"20\" />\n            </a>\n          </li>\n        ) : (\n          <>\n            <li onClick={() => handleModalOpen({ modalType: \"GIT_MODAL\" })}>\n              <GoGithubAction width=\"22\" height=\"20\" />\n            </li>\n          </>\n        )}\n        <li\n          onClick={event =>\n            handleUploadClick({ event: event, handleNewFileUpload })\n          }\n        >\n          <AiOutlineFolderOpen width=\"22\" height=\"22\" />\n        </li>\n        <li\n          onClick={() =>\n            // Change filename later\n            handleDownloadClick({ fileName: \"solitude.md\", editorState })\n          }\n        >\n          <AiOutlineSave width=\"22\" height=\"22\" />\n        </li>\n        {token && (\n          <li>\n            <GitHubUser />\n          </li>\n        )}\n      </ul>\n    </div>\n  );\n};\n\nexport default Toolbar;\n","import React from \"react\";\nimport Toolbar from \"./Toolbar.js\";\nimport { connect } from \"react-redux\";\nimport { updateMarkdownValue, showModal, hideModal } from \"../../actions\";\n\nconst mapDispatchToProps = dispatch => ({\n  handleNewFileUpload: value => dispatch(updateMarkdownValue(value)),\n  handleModalOpen: modalState => dispatch(showModal(modalState))\n  //handleModalClose: modalState => dispatch(hideModal(modalState))\n});\n\nconst mapStateToProps = state => ({\n  editorState: state.editor,\n  token: state.auth.token\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Toolbar);\n","import React from \"react\";\nimport { Button } from \"antd\";\n\nconst CustomButton = ({ onClick, style, label, ...props }) => {\n  return (\n    <Button onClick={e => onClick(e)} style={style}>\n      {label}\n    </Button>\n  );\n};\n\nexport default CustomButton;\n","import React, { useState, useEffect } from \"react\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport { useSelector } from \"react-redux\";\nimport { gql } from \"apollo-boost\";\nimport { calculateSolitudeRepoName } from \"../../utils/utils.js\";\n//import { registerSolitudeRepo } from \"../../actions\";\n\nconst FIND_SOLITUDE_NOTE_REPO = gql`\n  query SolitudeNoteRepo($owner: String!, $name: String!) {\n    repository(owner: $owner, name: $name) {\n      id\n      name\n      nameWithOwner\n    }\n  }\n`;\n\nconst FindSolitudeRepository = ({ updateRepository }) => {\n  const owner = useSelector(state => state.auth.userName);\n  const repoName = calculateSolitudeRepoName(owner);\n  const variables = {\n    owner,\n    name: repoName\n    //name: \"rudra.dev\"\n  };\n\n  const { loading, error, data } = useQuery(FIND_SOLITUDE_NOTE_REPO, {\n    variables,\n    fetchPolicy: \"no-cache\"\n  });\n\n  useEffect(() => {\n    const onCompleted = data => {\n      const { id, name, nameWithOwner } = data.repository;\n      updateRepository({ id, name, nameWithOwner, loading });\n    };\n    const onError = error => {\n      updateRepository({ loading });\n      console.log(error);\n    };\n    if (onCompleted || onError) {\n      if (onCompleted && !loading && !error) {\n        onCompleted(data);\n      } else if (onError && !loading && error) {\n        onError(error);\n      }\n    }\n  }, [loading, data, error]);\n\n  return (\n    <div>\n      {!loading ? (\n        <>\n          {!data ? (\n            <p>No solitude managed repository exists!</p>\n          ) : (\n            <span>{data.repository.nameWithOwner}</span>\n          )}\n        </>\n      ) : (\n        <span>Loading...</span>\n      )}\n    </div>\n  );\n};\n\nexport default FindSolitudeRepository;\n","import React from \"react\";\nimport { gql } from \"apollo-boost\";\nimport { useMutation } from \"@apollo/react-hooks\";\nimport CustomButton from \"../../shared/customButton/CustomButton.js\";\n\nconst CREATE_SOLITUDE_NOTES_REPOSITORY = gql`\n  mutation CreateSolitudeNotesRepository {\n    cloneTemplateRepository(\n      input: {\n        name: \"rudrabot-solitude-notes\"\n        repositoryId: \"MDEwOlJlcG9zaXRvcnkyMzc2ODIwOTE=\"\n        ownerId: \"MDQ6VXNlcjM1MDI2MTM0\"\n        visibility: PRIVATE\n      }\n    ) {\n      repository {\n        name\n      }\n    }\n  }\n`;\n\nconst CreateRepository = ({}) => {\n  const [createRepo, { data }] = useMutation(CREATE_SOLITUDE_NOTES_REPOSITORY);\n  return (\n    <CustomButton\n      label=\"Create\"\n      onClick={e => {\n        createRepo();\n        console.log(\"Clicked\");\n      }}\n    />\n  );\n};\n\nexport default CreateRepository;\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport GitModalContainer from \"./GitModalContainer.js\";\n\nconst MODAL_COMPONENTS = {\n  GIT_MODAL: GitModalContainer\n};\n\nconst RootModalContainer = ({ modal }) => {\n  console.log(modal.modalType);\n  if (!modal.modalType) return null;\n\n  const SpecificModal = MODAL_COMPONENTS[modal.modalType];\n  return <SpecificModal {...modal} />;\n};\n\nconst mapStateToProps = state => ({\n  modal: state.modal\n});\n\nexport default connect(mapStateToProps)(RootModalContainer);\n","import React, { useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport { hideModal } from \"../../actions\";\nimport config from \"../../data/config.json\";\nimport CustomModal from \"../../shared/customModal/CustomModal.js\";\nimport CustomButton from \"../../shared/customButton/CustomButton.js\";\nimport FindSolitudeRepository from \"../../components/findSolitdueRepository/FindSolitudeRepository.js\";\nimport CreateRepository from \"../../components/createRepository/CreateRepository.js\";\nimport { registerSolitudeRepo } from \"../../actions\";\nimport { buildGitHubLink } from \"../../utils/utils.js\";\n\nconst GitModalContainer = ({\n  token,\n  isOpen,\n  modalProps,\n  hideModal,\n  updateRepository,\n  repository\n}) => {\n  const onGitConnectClick = e => {\n    e.preventDefault();\n    const gitHubLink = buildGitHubLink(config.GITHUB_APP_CLIENT_ID);\n    window.location.href = gitHubLink;\n  };\n\n  useEffect(() => {\n    // Set loading true on every time we open the modal\n    updateRepository({ loading: true });\n  }, []);\n\n  // Create a repository if doesn't exist already\n\n  return (\n    <CustomModal\n      isModalOpen={isOpen}\n      modalTitle={\"Your notes\"}\n      modalBody={\n        token ? (\n          <div>\n            <FindSolitudeRepository updateRepository={updateRepository} />\n            {!repository.loading && !repository.id && <CreateRepository />}\n          </div>\n        ) : (\n          <CustomButton\n            label=\"Connect to GitHub\"\n            onClick={e => onGitConnectClick(e)}\n          />\n        )\n      }\n      onModalClose={hideModal}\n    />\n  );\n};\n\nconst mapStateToProps = state => ({\n  token: state.auth.token,\n  repository: state.repository\n});\n\nconst mapDispatchToProps = dispatch => ({\n  hideModal: () => dispatch(hideModal()),\n  updateRepository: repo => dispatch(registerSolitudeRepo(repo))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(GitModalContainer);\n","import ApolloClient from \"apollo-boost\";\nimport { setContext } from \"apollo-link-context\";\n\nconst authClient = token => {\n  const client = new ApolloClient({\n    uri: \"https://api.github.com/graphql\",\n\n    request: operation => {\n      //const token = localStorage.getItem(\"token\");\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : \"\"\n        }\n      });\n    }\n  });\n  return client;\n};\n\nexport default authClient;\n","import React, { useState, useEffect } from \"react\";\nimport AppbarContainer from \"./components/appbar/AppbarContainer.js\";\nimport SplitViewContainer from \"./components/splitView/SplitViewContainer.js\";\nimport ToolbarContainer from \"./components/toolbar/ToolbarContainer.js\";\nimport RootModalContainer from \"./components/modal/RootModalContainer.js\";\nimport { updateToken } from \"./actions\";\n\nimport { ApolloProvider } from \"@apollo/react-hooks\";\nimport authClient from \"./auth/AuthClient.js\";\nimport { isEmpty } from \"lodash\";\nimport { connect } from \"react-redux\";\n\nimport \"antd/dist/antd.css\";\nimport \"./styles/App.css\";\nimport \"./styles/Resizer.css\";\nimport \"./styles/ResultPane.css\";\n\nfunction App({ onTokenChange, authToken }) {\n  const [token, setToken] = useState(\"\");\n\n  useEffect(() => {\n    let code =\n      window.location.href.match(/\\?code=(.*)/) &&\n      window.location.href.match(/\\?code=(.*)/)[1];\n    if (code) {\n      fetch(`https://prose-gatekeeper.glitch.me/authenticate/${code}`)\n        .then(response => response.json())\n        .then(({ error, token }) => {\n          if (error) {\n            throw Error(error);\n          }\n          console.log(token);\n          setToken(token);\n          // Store token in redux\n          onTokenChange(token);\n        })\n        .catch(error => {\n          console.log(error);\n        });\n    }\n  }, []);\n\n  const client = authClient(token);\n  return (\n    <div>\n      <ApolloProvider client={client}>\n        <AppbarContainer />\n        <ToolbarContainer />\n        <SplitViewContainer />\n        <RootModalContainer />\n      </ApolloProvider>\n    </div>\n  );\n}\n\nconst mapStateToProps = state => ({\n  authToken: state.auth.token\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onTokenChange: token => dispatch(updateToken(token))\n});\n\nexport default connect(null, mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const editor = (state = {}, action) => {\n  switch (action.type) {\n    case \"UPDATE_EDITOR_STATE\":\n      return action.editorState || state;\n    default:\n      return state;\n  }\n};\n\nexport default editor;\n","const splitPane = (state = { size: \"50%\" }, action) => {\n  switch (action.type) {\n    case \"UPDATE_PANE_SIZE\":\n      return { ...state, size: action.size };\n    default:\n      return state;\n  }\n};\n\nexport default splitPane;\n","const markdownValue = (state = \"\", action) => {\n  switch (action.type) {\n    case \"UPDATE_MARKDOWN_VALUE\":\n      return action.text;\n    default:\n      return state;\n  }\n};\n\nexport default markdownValue;\n","const auth = (state = { token: \"\" }, action) => {\n  switch (action.type) {\n    case \"UPDATE_TOKEN\":\n      return { ...state, token: action.token };\n    case \"UPDATE_GIT_USER\":\n      return { ...state, userName: action.userName };\n    default:\n      return state;\n  }\n};\n\nexport default auth;\n","let initialState = {};\nconst modal = (state = initialState, action) => {\n  switch (action.type) {\n    case \"SHOW_MODAL\":\n      return {\n        ...state,\n        isOpen: true,\n        modalType: action.modalType,\n        modalProps: action.modalProps\n      };\n    case \"HIDE_MODAL\":\n      return { ...initialState, isOpen: false };\n    default:\n      return state;\n  }\n};\n\nexport default modal;\n","const initialState = {\n  loading: true\n};\nconst repository = (state = initialState, action) => {\n  switch (action.type) {\n    case \"REGISTER_SOLITUDE_REPO\":\n      return { ...state, ...action.repo };\n    case \"UPDATE_SOLITUDE_REPO\":\n      return { ...state, ...action.repo };\n    default:\n      return state;\n  }\n};\n\nexport default repository;\n","import { combineReducers } from \"redux\";\nimport editor from \"./editor.js\";\nimport splitPane from \"./splitPane.js\";\nimport markdownValue from \"./markdown.js\";\nimport auth from \"./auth.js\";\nimport modal from \"./modal.js\";\nimport repository from \"./repository.js\";\n\nexport default combineReducers({\n  markdownValue,\n  editor,\n  splitPane,\n  modal,\n  auth,\n  repository\n});\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\n// Redux\nimport { Provider } from \"react-redux\";\nimport { createStore } from \"redux\";\nimport rootReducer from \"./reducers\";\n\nconst store = createStore(\n  rootReducer,\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}