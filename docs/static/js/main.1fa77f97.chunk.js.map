{"version":3,"sources":["shared/customEditor/CustomEditor.js","shared/customEditor/CustomEditorContainer.js","components/codeBlock/CodeBlock.js","components/resultPane/ResultPane.js","components/appbar/AppbarContainer.js","shared/listRepository/ListRepository.js","components/toolbar/Toolbar.js","auth/AuthClient.js","App.js","serviceWorker.js","index.js"],"names":["CustomEditor","value","onValueChange","onSelectedEditorChange","options","mode","lineNumbers","spellcheck","theme","onBeforeChange","editor","data","onSelection","height","CustomEditorContainer","onMarkdownValueChange","initialvalue","useState","editorValue","setEditorValue","useEffect","CodeBlock","this","props","language","style","base16AteliersulphurpoolLight","PureComponent","defaultProps","ResultPane","markdownValue","source","escapeHtml","renderers","code","AppbarContainer","onViewModeChange","setMode","className","width","onClick","LIST_REPO_QUERY","gql","ListRepository","useQuery","loading","error","console","log","viewer","repositories","totalCount","Toolbar","onRichTextButtonClick","token","type","href","config","GITHUB_APP_CLIENT_ID","authClient","ApolloClient","uri","request","operation","setContext","headers","authorization","App","paneSize","setPaneSize","setMarkdownValue","editorState","setEditorState","setToken","window","location","match","fetch","then","response","json","Error","catch","client","selectedText","getSelection","cursor","getCursor","setCursor","line","A1","A2","ch","B1","findWordAt","anchor","B2","head","setSelection","test","replaceSelection","focus","input","repeat","Number","split","defaultSize","size","Boolean","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1fa77f97.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { Controlled as CodeMirror } from \"react-codemirror2\";\n\nimport \"codemirror/lib/codemirror.css\";\nimport \"codemirror/theme/neo.css\";\n\n// Import supported languages here\nimport \"codemirror/mode/javascript/javascript\";\nimport \"codemirror/mode/jsx/jsx\";\nimport \"codemirror/mode/python/python\";\nimport \"codemirror/mode/clike/clike\";\nimport \"codemirror/mode/css/css\";\nimport \"codemirror/mode/go/go\";\nimport \"codemirror/mode/rust/rust\";\nimport \"codemirror/mode/markdown/markdown\";\nimport \"codemirror/mode/gfm/gfm\";\nimport \"codemirror/mode/shell/shell\";\n\nimport \"../../styles/CodeMirror.css\";\n\nconst CustomEditor = ({ value, onValueChange, onSelectedEditorChange }) => {\n  return (\n    <CodeMirror\n      options={{\n        mode: \"gfm\",\n        lineNumbers: true,\n        spellcheck: true,\n        //autofocus: true,\n        theme: \"neo\"\n      }}\n      value={value}\n      onBeforeChange={(editor, data, value) => {\n        onValueChange(value);\n      }}\n      // TODO\n      // Editor is set to autofocus, and onFocus the editorState will be\n      // updated.\n      // Remove onFocus and add initialize the editorState with a codemirror\n      // instance\n      //onFocus={(editor, data) => {\n      //onSelectedEditorChange(editor);\n      //}}\n      onSelection={(editor, data) => {\n        onSelectedEditorChange(editor);\n      }}\n      height=\"100%\"\n    />\n  );\n};\n\nexport default CustomEditor;\n","import React, { useState, useEffect } from \"react\";\nimport CustomEditor from \"./CustomEditor.js\";\n\nconst CustomEditorContainer = ({\n  onMarkdownValueChange,\n  onSelectedEditorChange,\n  initialvalue\n}) => {\n  const [editorValue, setEditorValue] = useState(initialvalue);\n\n  // Update the global markdown value whenever the markdown changes.\n  useEffect(() => {\n    onMarkdownValueChange(editorValue);\n  }, [editorValue]);\n\n  return (\n    <div>\n      <CustomEditor\n        value={editorValue}\n        onValueChange={setEditorValue}\n        onSelectedEditorChange={onSelectedEditorChange}\n      />\n    </div>\n  );\n};\n\nexport default CustomEditorContainer;\n","import React, { PureComponent } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Prism as SyntaxHighlighter } from \"react-syntax-highlighter\";\nimport {\n  ghcolors,\n  hopscotch,\n  pojoaque,\n  vs,\n  xonokai,\n  base16AteliersulphurpoolLight,\n  cb,\n  prism\n} from \"react-syntax-highlighter/dist/esm/styles/prism\";\n\nclass CodeBlock extends PureComponent {\n  static propTypes = {\n    value: PropTypes.string.isRequired,\n    language: PropTypes.string\n  };\n\n  static defaultProps = {\n    language: null\n  };\n\n  render() {\n    const { language, value } = this.props;\n    return (\n      <SyntaxHighlighter\n        language={language}\n        style={base16AteliersulphurpoolLight}\n      >\n        {value}\n      </SyntaxHighlighter>\n    );\n  }\n}\n\nexport default CodeBlock;\n","import React from \"react\";\nimport ReactMarkdown from \"react-markdown\";\nimport CodeBlock from \"../codeBlock/CodeBlock\";\n\nconst ResultPane = ({ markdownValue }) => {\n  return (\n    <ReactMarkdown\n      source={markdownValue}\n      //source={\"\"}\n      escapeHtml={false}\n      renderers={{ code: CodeBlock }}\n    />\n  );\n};\n\nexport default ResultPane;\n","import React, { useState, useEffect } from \"react\";\nimport { MdFormatAlignLeft } from \"react-icons/md\";\nimport { MdChromeReaderMode } from \"react-icons/md\";\nimport { TiEye } from \"react-icons/ti/\";\nimport \"../../styles/Appbar.css\";\n\nconst AppbarContainer = ({ onViewModeChange }) => {\n  const [mode, setMode] = useState(\"split\");\n\n  // Update the app view mode\n  useEffect(() => {\n    onViewModeChange(mode);\n  }, [mode]);\n\n  return (\n    <div className=\"appbar\">\n      <div className=\"logo\">\n        <span>Solitude</span>\n      </div>\n\n      <div className=\"modebar\">\n        <MdFormatAlignLeft\n          width=\"22\"\n          height=\"22\"\n          onClick={() => setMode(\"editor\")}\n        />\n        <MdChromeReaderMode\n          width=\"22\"\n          height=\"22\"\n          onClick={() => setMode(\"split\")}\n        />\n        <TiEye width=\"22\" height=\"22\" onClick={() => setMode(\"view\")} />\n      </div>\n    </div>\n  );\n};\n\nexport default AppbarContainer;\n","import React from \"react\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport { gql } from \"apollo-boost\";\n\nconst LIST_REPO_QUERY = gql`\n  {\n    viewer {\n      repositories(first: 100) {\n        totalCount\n        pageInfo {\n          endCursor\n          hasNextPage\n        }\n        nodes {\n          name\n          owner {\n            login\n          }\n        }\n      }\n    }\n  }\n`;\n\nconst ListRepository = () => {\n  const { loading, error, data } = useQuery(LIST_REPO_QUERY);\n\n  console.log(loading, error, data);\n  return <>{data && data.viewer.repositories.totalCount}</>;\n};\n\nexport default ListRepository;\n","import React from \"react\";\nimport {\n  AiOutlineBold,\n  AiOutlineCode,\n  AiOutlineItalic,\n  AiOutlineGithub,\n  AiOutlineOrderedList,\n  AiOutlineUnorderedList,\n  AiOutlineUnderline,\n  AiOutlineStrikethrough,\n  AiOutlineSave,\n  AiOutlineHighlight,\n  AiOutlineTable,\n  AiOutlineFontSize,\n  AiOutlineMinus\n} from \"react-icons/ai\";\n\nimport { FaGithub } from \"react-icons/fa\";\n\nimport ListRepository from \"../../shared/listRepository/ListRepository.js\";\nimport config from \"../../data/config.json\";\n\nconst Toolbar = ({ onRichTextButtonClick, token }) => {\n  return (\n    <div className=\"toolbar\">\n      <ul>\n        <li>\n          <AiOutlineFontSize\n            width=\"22\"\n            height=\"22\"\n            onClick={() => onRichTextButtonClick({ type: \"header\" })}\n          />\n        </li>\n        <li>\n          <AiOutlineBold\n            width=\"22\"\n            height=\"22\"\n            onClick={() => onRichTextButtonClick({ type: \"bold\" })}\n          />\n        </li>\n        <li>\n          <AiOutlineItalic\n            width=\"22\"\n            height=\"22\"\n            onClick={() => onRichTextButtonClick({ type: \"italic\" })}\n          />\n        </li>\n        <li>\n          <AiOutlineStrikethrough\n            width=\"22\"\n            height=\"22\"\n            onClick={() => onRichTextButtonClick({ type: \"strikethrough\" })}\n          />\n        </li>\n        <li>\n          <AiOutlineMinus\n            width=\"22\"\n            height=\"22\"\n            onClick={() => onRichTextButtonClick({ type: \"hr\" })}\n          />\n        </li>\n        <li>\n          <AiOutlineTable\n            width=\"22\"\n            height=\"22\"\n            onClick={() => onRichTextButtonClick({ type: \"table\" })}\n          />\n        </li>\n        <li>\n          <AiOutlineCode\n            width=\"22\"\n            height=\"22\"\n            onClick={() => onRichTextButtonClick({ type: \"code\" })}\n          />\n        </li>\n      </ul>\n      <ul>\n        <li>\n          <a\n            // TODO\n            // Replace later with a different component\n            href={`https://github.com/login/oauth/authorize?client_id=${config.GITHUB_APP_CLIENT_ID}&scope=repo`}\n            //href={`https://github.com/login/oauth/authorize?client_id=${config.GITHUB_APP_CLIENT_ID}&scope=repo&redirect_uri=${config.GITHUB_APP_REDIRECT_URI}`}\n          >\n            <FaGithub width=\"22\" height=\"20\" />\n            {token && (\n              <>\n                {\" \"}\n                (<ListRepository />)\n              </>\n            )}\n          </a>\n        </li>\n        <li>\n          <AiOutlineSave width=\"22\" height=\"22\" />\n        </li>\n      </ul>\n    </div>\n  );\n};\n\nexport default Toolbar;\n\n//<li onClick={() => onRichTextButtonClick({ type: \"h1\" })}> H1 </li>\n//<li onClick={() => onRichTextButtonClick({ type: \"h2\" })}> H2 </li>\n//<li onClick={() => onRichTextButtonClick({ type: \"h3\" })}> H3 </li>\n//<li onClick={() => onRichTextButtonClick({ type: \"h4\" })}> H4 </li>\n//<li onClick={() => onRichTextButtonClick({ type: \"h4\" })}> H4 </li>\n//<li>\n//<AiOutlineOrderedList\n//width=\"22\"\n//height=\"22\"\n//onClick={() => onRichTextButtonClick({ type: \"ol\" })}\n///>\n//</li>;\n//\n//<li>\n//<AiOutlineUnorderedList\n//width=\"22\"\n//height=\"22\"\n//onClick={() => onRichTextButtonClick({ type: \"ul\" })}\n///>\n//</li>\n//\n//<li>\n//<AiOutlineUnderline\n//width=\"22\"\n//height=\"22\"\n//onClick={() => onRichTextButtonClick({ type: \"underline\" })}\n///>\n//</li>;\n//\n//<li>\n//<AiOutlineHighlight\n//width=\"22\"\n//height=\"22\"\n//onClick={() => onRichTextButtonClick({ type: \"highlight\" })}\n///>\n//</li>\n","import ApolloClient from \"apollo-boost\";\nimport { setContext } from \"apollo-link-context\";\n\nconst authClient = token => {\n  const client = new ApolloClient({\n    uri: \"https://api.github.com/graphql\",\n\n    request: operation => {\n      //const token = localStorage.getItem(\"token\");\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : \"\"\n        }\n      });\n    }\n  });\n  return client;\n};\n\nexport default authClient;\n","import React, { useState, useEffect } from \"react\";\nimport SplitPane from \"react-split-pane\";\nimport CustomEditorContainer from \"./shared/customEditor/CustomEditorContainer.js\";\nimport ResultPane from \"./components/resultPane/ResultPane.js\";\nimport AppbarContainer from \"./components/appbar/AppbarContainer.js\";\nimport Toolbar from \"./components/toolbar/Toolbar.js\";\nimport ListRepository from \"./shared/listRepository/ListRepository.js\";\nimport \"./styles/App.css\";\nimport \"./styles/Resizer.css\";\nimport \"./styles/ResultPane.css\";\n\nimport { ApolloProvider } from \"@apollo/react-hooks\";\nimport authClient from \"./auth/AuthClient.js\";\n\nfunction App() {\n  const [paneSize, setPaneSize] = useState(\"50%\");\n\n  // Remove global states in APP and use redux\n  const [markdownValue, setMarkdownValue] = useState(\"\");\n  const [editorState, setEditorState] = useState();\n  const [token, setToken] = useState(\"\");\n\n  const handleMarkdownValueChange = value => {\n    setMarkdownValue(value);\n  };\n\n  useEffect(() => {\n    let code =\n      window.location.href.match(/\\?code=(.*)/) &&\n      window.location.href.match(/\\?code=(.*)/)[1];\n    if (code) {\n      fetch(`https://prose-gatekeeper.glitch.me/authenticate/${code}`)\n        .then(response => response.json())\n        .then(({ error, token }) => {\n          if (error) {\n            throw Error(error);\n          }\n          console.log(token);\n          setToken(token);\n        })\n        .catch(error => {\n          console.log(error);\n        });\n    }\n  }, []);\n\n  const handleViewModeChange = value => {\n    if (value === \"editor\") {\n      setPaneSize(\"100%\");\n    } else if (value === \"split\") {\n      setPaneSize(\"50%\");\n    } else if (value == \"view\") {\n      setPaneSize(\"0%\");\n    }\n  };\n\n  const handleRichTextButtonClick = ({ type = \"\" }) => {\n    // As we don't have the editor state initialized, return null\n    if (!editorState) return null;\n    let selectedText = editorState.getSelection();\n    let cursor = editorState.getCursor();\n\n    switch (type) {\n      case \"header\":\n        editorState.setCursor(cursor.line, 0);\n        const A1 = editorState.getCursor().line;\n        const A2 = editorState.getCursor().ch;\n        const B1 = editorState.findWordAt({ line: A1, ch: A2 }).anchor.ch;\n        const B2 = editorState.findWordAt({ line: A1, ch: A2 }).head.ch;\n\n        editorState.setSelection({ line: A1, ch: B1 }, { line: A1, ch: B2 });\n        selectedText = editorState.getSelection();\n\n        // If header in range of h1-h5\n        if (/^#{1,5}$/.test(selectedText)) {\n          editorState.replaceSelection(selectedText + \"#\");\n        }\n        // If header is h6\n        else if (/^#{6,}$/.test(selectedText)) {\n          break;\n        } else {\n          editorState.replaceSelection(\"# \" + selectedText);\n        }\n        editorState.focus();\n        break;\n      case \"bold\":\n        editorState.replaceSelection(\"**\" + (selectedText || \" \") + \"**\");\n        editorState.focus();\n        break;\n      case \"italic\":\n        editorState.replaceSelection(\"*\" + (selectedText || \" \") + \"*\");\n        editorState.focus();\n        break;\n      case \"strikethrough\":\n        editorState.replaceSelection(\"~~\" + (selectedText || \" \") + \"~~\");\n        editorState.focus();\n        break;\n      case \"hr\":\n        editorState.setCursor(cursor.line + 1, 0);\n        editorState.replaceSelection(\"\\n\\n---\\n\");\n        editorState.focus();\n        break;\n      case (type.match(/h[1-6]{1}/) || {}).input:\n        editorState.setCursor(cursor.line, 0);\n        editorState.replaceSelection(\"#\".repeat(Number(type[1])) + \" \");\n        editorState.focus();\n        break;\n      case \"table\":\n        const sampleTable =\n          \"\\n| Tables        | Are           | Cool  |\\n\" +\n          \"| ------------- |:-------------:| -----:|\\n\" +\n          \"| col 3 is      | right-aligned | $1600 |\\n\" +\n          \"| col 2 is      | centered      |   $12 |\\n\" +\n          \"| zebra stripes | are neat      |    $1 |\\n\";\n        editorState.setCursor(cursor.line, 0);\n        editorState.replaceSelection(sampleTable);\n        editorState.focus();\n        break;\n      case \"code\":\n        editorState.replaceSelection(\n          `\\n\\`\\`\\`language\\n${selectedText}\\n\\`\\`\\`\\n`\n        );\n        editorState.focus();\n        break;\n      default:\n        editorState.replaceSelection(selectedText);\n    }\n  };\n\n  const client = authClient(token);\n  return (\n    <div>\n      <ApolloProvider client={client}>\n        <AppbarContainer onViewModeChange={handleViewModeChange} />\n        <Toolbar\n          onRichTextButtonClick={handleRichTextButtonClick}\n          token={token}\n        />\n        <SplitPane split=\"vertical\" defaultSize={paneSize} size={paneSize}>\n          <div className=\"editor-pane\">\n            {paneSize !== \"0%\" && (\n              <CustomEditorContainer\n                onMarkdownValueChange={handleMarkdownValueChange}\n                onSelectedEditorChange={setEditorState}\n                initialvalue={markdownValue}\n              />\n            )}\n          </div>\n          <div className=\"result-pane\">\n            <ResultPane markdownValue={markdownValue} />\n          </div>\n        </SplitPane>\n      </ApolloProvider>\n    </div>\n  );\n}\n\nexport default App;\n\n//{token && <ListRepository />}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}