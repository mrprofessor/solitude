{"version":3,"sources":["actions/index.js","components/appbar/Appbar.js","components/appbar/AppbarContainer.js","components/customEditor/CustomEditor.js","components/customEditor/CustomEditorContainer.js","components/codeBlock/CodeBlock.js","components/resultPane/ResultPane.js","components/splitView/SplitView.js","components/splitView/SplitViewContainer.js","shared/listRepository/ListRepository.js","utils/utils.js","components/toolbar/Toolbar.js","components/toolbar/ToolbarContainer.js","auth/AuthClient.js","App.js","serviceWorker.js","reducers/editor.js","reducers/splitPane.js","reducers/markdown.js","reducers/auth.js","reducers/index.js","index.js"],"names":["updatePaneSize","size","type","Appbar","onViewModeChange","className","width","height","onClick","connect","dispatch","value","CustomEditor","onValueChange","onSelectedEditorChange","markdownValue","options","mode","lineNumbers","spellcheck","theme","onBeforeChange","editor","data","onSelection","state","text","editorState","CodeBlock","this","props","language","style","base16AteliersulphurpoolLight","PureComponent","defaultProps","console","log","source","escapeHtml","renderers","code","SplitView","paneSize","onPaneSizeChange","split","defaultSize","onDragFinished","CustomEditorContainer","splitPane","LIST_REPO_QUERY","gql","ListRepository","useQuery","loading","error","viewer","repositories","totalCount","handleRichTextButtonClick","isEmpty","selectedText","getSelection","cursor","getCursor","setCursor","line","A1","A2","ch","B1","findWordAt","anchor","B2","head","setSelection","test","replaceSelection","focus","match","input","repeat","Number","Toolbar","token","href","config","GITHUB_APP_CLIENT_ID","auth","authClient","ApolloClient","uri","request","operation","setContext","headers","authorization","onTokenChange","updateToken","useState","setToken","useEffect","window","location","fetch","then","response","json","Error","catch","client","AppbarContainer","ToolbarContainer","SplitViewContainer","Boolean","hostname","action","combineReducers","store","createStore","rootReducer","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1646e165.chunk.js","sourcesContent":["export const updateMarkdownValue = text => ({\n  type: \"UPDATE_MARKDOWN_VALUE\",\n  text\n});\n\nexport const updateEditorState = editorState => ({\n  type: \"UPDATE_EDITOR_STATE\",\n  editorState\n});\n\nexport const updatePaneSize = size => ({\n  type: \"UPDATE_PANE_SIZE\",\n  size\n});\n\nexport const updateToken = token => ({\n  type: \"UPDATE_TOKEN\",\n  token\n});\n","import React from \"react\";\nimport { MdFormatAlignLeft } from \"react-icons/md\";\nimport { MdChromeReaderMode } from \"react-icons/md\";\nimport { TiEye } from \"react-icons/ti/\";\nimport \"../../styles/Appbar.css\";\n\nconst Appbar = ({ onViewModeChange }) => {\n  return (\n    <div className=\"appbar\">\n      <div className=\"logo\">\n        <span>Solitude</span>\n      </div>\n\n      <div className=\"modebar\">\n        <MdFormatAlignLeft\n          width=\"22\"\n          height=\"22\"\n          onClick={() => onViewModeChange(\"100%\")}\n        />\n        <MdChromeReaderMode\n          width=\"22\"\n          height=\"22\"\n          onClick={() => onViewModeChange(\"50%\")}\n        />\n        <TiEye width=\"22\" height=\"22\" onClick={() => onViewModeChange(\"0%\")} />\n      </div>\n    </div>\n  );\n};\n\nexport default Appbar;\n","import { connect } from \"react-redux\";\nimport { updatePaneSize } from \"../../actions\";\nimport Appbar from \"./Appbar.js\";\n\nconst mapDispatchToProps = dispatch => ({\n  onViewModeChange: value => dispatch(updatePaneSize(value))\n});\n\nexport default connect(null, mapDispatchToProps)(Appbar);\n","import React, { useState } from \"react\";\nimport { Controlled as CodeMirror } from \"react-codemirror2\";\n\nimport \"codemirror/lib/codemirror.css\";\nimport \"codemirror/theme/neo.css\";\n// Import supported languages here\nimport \"codemirror/mode/javascript/javascript\";\nimport \"codemirror/mode/jsx/jsx\";\nimport \"codemirror/mode/python/python\";\nimport \"codemirror/mode/clike/clike\";\nimport \"codemirror/mode/css/css\";\nimport \"codemirror/mode/go/go\";\nimport \"codemirror/mode/rust/rust\";\nimport \"codemirror/mode/markdown/markdown\";\nimport \"codemirror/mode/gfm/gfm\";\nimport \"codemirror/mode/shell/shell\";\n\nimport \"../../styles/CodeMirror.css\";\n\nconst CustomEditor = ({\n  onValueChange,\n  onSelectedEditorChange,\n  markdownValue\n}) => {\n  return (\n    <CodeMirror\n      options={{\n        mode: \"gfm\",\n        lineNumbers: true,\n        spellcheck: true,\n        theme: \"neo\"\n        //autofocus: true,\n      }}\n      value={markdownValue}\n      onBeforeChange={(editor, data, value) => {\n        onValueChange(value);\n      }}\n      onSelection={(editor, data) => {\n        onSelectedEditorChange(editor);\n      }}\n      height=\"100%\"\n    />\n  );\n};\n\nexport default CustomEditor;\n\n// TODO\n// Editor is set to autofocus, and onFocus the editorState will be\n// updated.\n// Remove onFocus and add initialize the editorState with a codemirror\n// instance\n//onFocus={(editor, data) => {\n//onSelectedEditorChange(editor);\n//}}\n","import { connect } from \"react-redux\";\nimport { updateMarkdownValue, updateEditorState } from \"../../actions\";\nimport CustomEditor from \"./CustomEditor.js\";\n\nconst mapStateToProps = state => ({\n  markdownValue: state.markdownValue\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onValueChange: value => dispatch(updateMarkdownValue(value)),\n  onSelectedEditorChange: editor => dispatch(updateEditorState(editor))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CustomEditor);\n","import React, { PureComponent } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Prism as SyntaxHighlighter } from \"react-syntax-highlighter\";\nimport {\n  ghcolors,\n  hopscotch,\n  pojoaque,\n  vs,\n  xonokai,\n  base16AteliersulphurpoolLight,\n  cb,\n  prism\n} from \"react-syntax-highlighter/dist/esm/styles/prism\";\n\nclass CodeBlock extends PureComponent {\n  static propTypes = {\n    value: PropTypes.string.isRequired,\n    language: PropTypes.string\n  };\n\n  static defaultProps = {\n    language: null\n  };\n\n  render() {\n    const { language, value } = this.props;\n    return (\n      <SyntaxHighlighter\n        language={language}\n        style={base16AteliersulphurpoolLight}\n      >\n        {value}\n      </SyntaxHighlighter>\n    );\n  }\n}\n\nexport default CodeBlock;\n","import React from \"react\";\nimport ReactMarkdown from \"react-markdown\";\nimport CodeBlock from \"../codeBlock/CodeBlock\";\n\nimport { connect } from \"react-redux\";\n\nconst ResultPane = ({ markdownValue }) => {\n  console.log(markdownValue);\n  return (\n    <ReactMarkdown\n      source={markdownValue}\n      //source={\"\"}\n      escapeHtml={false}\n      renderers={{ code: CodeBlock }}\n    />\n  );\n};\n\nconst mapStateToProps = state => ({\n  markdownValue: state.markdownValue\n});\n\nexport default connect(mapStateToProps)(ResultPane);\n","import React from \"react\";\nimport SplitPane from \"react-split-pane\";\nimport CustomEditorContainer from \"../customEditor/CustomEditorContainer.js\";\nimport ResultPane from \"../resultPane/ResultPane.js\";\n\nconst SplitView = ({ paneSize, onPaneSizeChange }) => {\n  return (\n    <SplitPane\n      split=\"vertical\"\n      defaultSize={paneSize}\n      size={paneSize}\n      //defaultSize={parseInt(localStorage.getItem(\"splitPos\"), 10)}\n      //onChange={size => localStorage.setItem(\"splitPos\", size)}\n      onDragFinished={size => onPaneSizeChange(size)}\n    >\n      <div className=\"editor-pane\">\n        {paneSize !== \"0%\" && <CustomEditorContainer />}\n      </div>\n      <div className=\"result-pane\">\n        <ResultPane />\n      </div>\n    </SplitPane>\n  );\n};\n\nexport default SplitView;\n","import { connect } from \"react-redux\";\nimport { updatePaneSize } from \"../../actions\";\nimport SplitView from \"./SplitView.js\";\n\nconst mapStateToProps = state => ({\n  paneSize: state.splitPane.size\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onPaneSizeChange: value => dispatch(updatePaneSize(value))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SplitView);\n","import React from \"react\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport { gql } from \"apollo-boost\";\n\nconst LIST_REPO_QUERY = gql`\n  {\n    viewer {\n      repositories(first: 100) {\n        totalCount\n        pageInfo {\n          endCursor\n          hasNextPage\n        }\n        nodes {\n          name\n          owner {\n            login\n          }\n        }\n      }\n    }\n  }\n`;\n\nconst ListRepository = () => {\n  const { loading, error, data } = useQuery(LIST_REPO_QUERY);\n\n  console.log(loading, error, data);\n  return <>{data && data.viewer.repositories.totalCount}</>;\n};\n\nexport default ListRepository;\n","import { isEmpty } from \"lodash\";\n\nexport const handleRichTextButtonClick = ({ type = \"\", editorState }) => {\n  // As we don't have the editor state initialized, return null\n  if (isEmpty(editorState)) return null;\n  let selectedText = editorState.getSelection();\n  let cursor = editorState.getCursor();\n\n  switch (type) {\n    case \"header\":\n      editorState.setCursor(cursor.line, 0);\n      // FIXME\n      // Use better variables\n      const A1 = editorState.getCursor().line;\n      const A2 = editorState.getCursor().ch;\n      const B1 = editorState.findWordAt({ line: A1, ch: A2 }).anchor.ch;\n      const B2 = editorState.findWordAt({ line: A1, ch: A2 }).head.ch;\n\n      editorState.setSelection({ line: A1, ch: B1 }, { line: A1, ch: B2 });\n      selectedText = editorState.getSelection();\n\n      // If header in range of h1-h5\n      if (/^#{1,5}$/.test(selectedText)) {\n        editorState.replaceSelection(selectedText + \"#\");\n      }\n      // If header is h6\n      else if (/^#{6,}$/.test(selectedText)) {\n        break;\n      } else {\n        editorState.replaceSelection(\"# \" + selectedText);\n      }\n      editorState.focus();\n      break;\n    case \"bold\":\n      editorState.replaceSelection(\"**\" + (selectedText || \" \") + \"**\");\n      editorState.focus();\n      break;\n    case \"italic\":\n      editorState.replaceSelection(\"*\" + (selectedText || \" \") + \"*\");\n      editorState.focus();\n      break;\n    case \"strikethrough\":\n      editorState.replaceSelection(\"~~\" + (selectedText || \" \") + \"~~\");\n      editorState.focus();\n      break;\n    case \"hr\":\n      editorState.setCursor(cursor.line + 1, 0);\n      editorState.replaceSelection(\"\\n\\n---\\n\");\n      editorState.focus();\n      break;\n    case (type.match(/h[1-6]{1}/) || {}).input:\n      editorState.setCursor(cursor.line, 0);\n      editorState.replaceSelection(\"#\".repeat(Number(type[1])) + \" \");\n      editorState.focus();\n      break;\n    case \"table\":\n      const sampleTable =\n        \"\\n| Tables        | Are           | Cool  |\\n\" +\n        \"| ------------- |:-------------:| -----:|\\n\" +\n        \"| col 3 is      | right-aligned | $1600 |\\n\" +\n        \"| col 2 is      | centered      |   $12 |\\n\" +\n        \"| zebra stripes | are neat      |    $1 |\\n\";\n      editorState.setCursor(cursor.line, 0);\n      editorState.replaceSelection(sampleTable);\n      editorState.focus();\n      break;\n    case \"code\":\n      editorState.replaceSelection(\n        `\\n\\`\\`\\`language\\n${selectedText}\\n\\`\\`\\`\\n`\n      );\n      editorState.focus();\n      break;\n    default:\n      editorState.replaceSelection(selectedText);\n  }\n};\n","import React from \"react\";\nimport {\n  AiOutlineBold,\n  AiOutlineCode,\n  AiOutlineItalic,\n  AiOutlineGithub,\n  AiOutlineOrderedList,\n  AiOutlineUnorderedList,\n  AiOutlineUnderline,\n  AiOutlineStrikethrough,\n  AiOutlineSave,\n  AiOutlineHighlight,\n  AiOutlineTable,\n  AiOutlineFontSize,\n  AiOutlineMinus\n} from \"react-icons/ai\";\n\nimport { FaGithub } from \"react-icons/fa\";\n\nimport ListRepository from \"../../shared/listRepository/ListRepository.js\";\nimport config from \"../../data/config.json\";\nimport { handleRichTextButtonClick } from \"../../utils/utils.js\";\n\nconst Toolbar = ({ editorState, token }) => {\n  return (\n    <div className=\"toolbar\">\n      <ul>\n        <li>\n          <AiOutlineFontSize\n            width=\"22\"\n            height=\"22\"\n            onClick={() =>\n              handleRichTextButtonClick({ type: \"header\", editorState })\n            }\n          />\n        </li>\n        <li>\n          <AiOutlineBold\n            width=\"22\"\n            height=\"22\"\n            onClick={() =>\n              handleRichTextButtonClick({ type: \"bold\", editorState })\n            }\n          />\n        </li>\n        <li>\n          <AiOutlineItalic\n            width=\"22\"\n            height=\"22\"\n            onClick={() =>\n              handleRichTextButtonClick({ type: \"italic\", editorState })\n            }\n          />\n        </li>\n        <li>\n          <AiOutlineStrikethrough\n            width=\"22\"\n            height=\"22\"\n            onClick={() =>\n              handleRichTextButtonClick({ type: \"strikethrough\", editorState })\n            }\n          />\n        </li>\n        <li>\n          <AiOutlineMinus\n            width=\"22\"\n            height=\"22\"\n            onClick={() =>\n              handleRichTextButtonClick({ type: \"hr\", editorState })\n            }\n          />\n        </li>\n        <li>\n          <AiOutlineTable\n            width=\"22\"\n            height=\"22\"\n            onClick={() =>\n              handleRichTextButtonClick({ type: \"table\", editorState })\n            }\n          />\n        </li>\n        <li>\n          <AiOutlineCode\n            width=\"22\"\n            height=\"22\"\n            onClick={() =>\n              handleRichTextButtonClick({ type: \"code\", editorState })\n            }\n          />\n        </li>\n      </ul>\n      <ul>\n        <li>\n          <a\n            // TODO\n            // Replace later with a different component\n            href={`https://github.com/login/oauth/authorize?client_id=${config.GITHUB_APP_CLIENT_ID}&scope=repo`}\n            //href={`https://github.com/login/oauth/authorize?client_id=${config.GITHUB_APP_CLIENT_ID}&scope=repo&redirect_uri=${config.GITHUB_APP_REDIRECT_URI}`}\n          >\n            <FaGithub width=\"22\" height=\"20\" />\n            {token && (\n              <>\n                {\" \"}\n                (<ListRepository />)\n              </>\n            )}\n          </a>\n        </li>\n        <li>\n          <AiOutlineSave width=\"22\" height=\"22\" />\n        </li>\n      </ul>\n    </div>\n  );\n};\n\nexport default Toolbar;\n\n//<li onClick={() => handleRichTextButtonClick({ type: \"h1\", editorState })}> H1 </li>\n//<li onClick={() => handleRichTextButtonClick({ type: \"h2\", editorState })}> H2 </li>\n//<li onClick={() => handleRichTextButtonClick({ type: \"h3\", editorState })}> H3 </li>\n//<li onClick={() => handleRichTextButtonClick({ type: \"h4\", editorState })}> H4 </li>\n//<li onClick={() => handleRichTextButtonClick({ type: \"h4\", editorState })}> H4 </li>\n//<li>\n//<AiOutlineOrderedList\n//width=\"22\"\n//height=\"22\"\n//onClick={() => handleRichTextButtonClick({ type: \"ol\", editorState })}\n///>\n//</li>;\n//\n//<li>\n//<AiOutlineUnorderedList\n//width=\"22\"\n//height=\"22\"\n//onClick={() => handleRichTextButtonClick({ type: \"ul\", editorState })}\n///>\n//</li>\n//\n//<li>\n//<AiOutlineUnderline\n//width=\"22\"\n//height=\"22\"\n//onClick={() => handleRichTextButtonClick({ type: \"underline\", editorState })}\n///>\n//</li>;\n//\n//<li>\n//<AiOutlineHighlight\n//width=\"22\"\n//height=\"22\"\n//onClick={() => handleRichTextButtonClick({ type: \"highlight\", editorState })}\n///>\n//</li>\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport Toolbar from \"./Toolbar.js\";\n\nconst mapStateToProps = state => ({\n  editorState: state.editor,\n  token: state.auth.token\n});\n\nexport default connect(mapStateToProps)(Toolbar);\n","import ApolloClient from \"apollo-boost\";\nimport { setContext } from \"apollo-link-context\";\n\nconst authClient = token => {\n  const client = new ApolloClient({\n    uri: \"https://api.github.com/graphql\",\n\n    request: operation => {\n      //const token = localStorage.getItem(\"token\");\n      operation.setContext({\n        headers: {\n          authorization: token ? `Bearer ${token}` : \"\"\n        }\n      });\n    }\n  });\n  return client;\n};\n\nexport default authClient;\n","import React, { useState, useEffect } from \"react\";\nimport AppbarContainer from \"./components/appbar/AppbarContainer.js\";\nimport SplitViewContainer from \"./components/splitView/SplitViewContainer.js\";\nimport ToolbarContainer from \"./components/toolbar/ToolbarContainer.js\";\nimport { updateToken } from \"./actions\";\n\nimport { ApolloProvider } from \"@apollo/react-hooks\";\nimport authClient from \"./auth/AuthClient.js\";\nimport { isEmpty } from \"lodash\";\nimport { connect } from \"react-redux\";\n\nimport \"./styles/App.css\";\nimport \"./styles/Resizer.css\";\nimport \"./styles/ResultPane.css\";\n\nfunction App({ onTokenChange }) {\n  const [token, setToken] = useState(\"\");\n\n  useEffect(() => {\n    let code =\n      window.location.href.match(/\\?code=(.*)/) &&\n      window.location.href.match(/\\?code=(.*)/)[1];\n    if (code) {\n      fetch(`https://prose-gatekeeper.glitch.me/authenticate/${code}`)\n        .then(response => response.json())\n        .then(({ error, token }) => {\n          if (error) {\n            throw Error(error);\n          }\n          console.log(token);\n          setToken(token);\n          // Store token in redux\n          onTokenChange(token);\n        })\n        .catch(error => {\n          console.log(error);\n        });\n    }\n  }, []);\n\n  const client = authClient(token);\n  return (\n    <div>\n      <ApolloProvider client={client}>\n        <AppbarContainer />\n        <ToolbarContainer />\n        <SplitViewContainer />\n      </ApolloProvider>\n    </div>\n  );\n}\n\n//const mapStateToProps = state => ({\n//editorState: state.editor\n//});\n\nconst mapDispatchToProps = dispatch => ({\n  onTokenChange: token => dispatch(updateToken(token))\n});\n\nexport default connect(null, mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const editor = (state = {}, action) => {\n  switch (action.type) {\n    case \"UPDATE_EDITOR_STATE\":\n      return action.editorState || state;\n    default:\n      return state;\n  }\n};\n\nexport default editor;\n","const splitPane = (state = { size: \"50%\" }, action) => {\n  switch (action.type) {\n    case \"UPDATE_PANE_SIZE\":\n      return { ...state, size: action.size };\n    default:\n      return state;\n  }\n};\n\nexport default splitPane;\n","const markdownValue = (state = \"\", action) => {\n  switch (action.type) {\n    case \"UPDATE_MARKDOWN_VALUE\":\n      return action.text;\n    default:\n      return state;\n  }\n};\n\nexport default markdownValue;\n","const auth = (state = { token: \"\" }, action) => {\n  switch (action.type) {\n    case \"UPDATE_TOKEN\":\n      return { ...state, token: action.token };\n    default:\n      return state;\n  }\n};\n\nexport default auth;\n","import { combineReducers } from \"redux\";\nimport editor from \"./editor.js\";\nimport splitPane from \"./splitPane.js\";\nimport markdownValue from \"./markdown.js\";\nimport auth from \"./auth.js\";\n\nexport default combineReducers({\n  markdownValue,\n  editor,\n  splitPane,\n  auth\n});\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\n// Redux\nimport { Provider } from \"react-redux\";\nimport { createStore } from \"redux\";\nimport rootReducer from \"./reducers\";\n\nconst store = createStore(\n  rootReducer,\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}